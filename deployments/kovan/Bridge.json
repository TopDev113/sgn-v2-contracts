{
  "address": "0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "DelayPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DelayedTransferAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelayedTransferExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "EpochLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "EpochVolumeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "seqnum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaxSendUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinAddUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinSendUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcTransferId",
          "type": "bytes32"
        }
      ],
      "name": "Relay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resetTime",
          "type": "uint256"
        }
      ],
      "name": "ResetNotification",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "SignersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "seqnum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "refid",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawDone",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addGovener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addseq",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "delayedTransfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumeCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "executeDelayedTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "governors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "increaseNoticePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastOpTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAdd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimalMaxSlippage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyResetSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_relayRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeGovener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceGovener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "resetSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setDelayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setDelayThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochVolumeCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minimalMaxSlippage",
          "type": "uint32"
        }
      ],
      "name": "setMinimalMaxSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newSigners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_newPowers",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_curSigners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_curPowers",
          "type": "uint256[]"
        }
      ],
      "name": "updateSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "verifySigs",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_wdmsg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "withdraws",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf1c456fafb13d55a0e417a94de6b6ded16bdf7cbcfc80f582a3a3a1a2d10a15",
  "receipt": {
    "to": null,
    "from": "0x1b9dFC56e38b0F92448659C114e2347Bd803911c",
    "contractAddress": "0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",
    "transactionIndex": 6,
    "gasUsed": "4249633",
    "logsBloom": "0x
    "blockHash": "0x61203715836fe5aac7111f388c9eab8273959b4ee28eebfbe0414a8185a0b25e",
    "transactionHash": "0xcf1c456fafb13d55a0e417a94de6b6ded16bdf7cbcfc80f582a3a3a1a2d10a15",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 28455836,
        "transactionHash": "0xcf1c456fafb13d55a0e417a94de6b6ded16bdf7cbcfc80f582a3a3a1a2d10a15",
        "address": "0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x61203715836fe5aac7111f388c9eab8273959b4ee28eebfbe0414a8185a0b25e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28455836,
        "transactionHash": "0xcf1c456fafb13d55a0e417a94de6b6ded16bdf7cbcfc80f582a3a3a1a2d10a15",
        "address": "0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c",
        "logIndex": 16,
        "blockHash": "0x61203715836fe5aac7111f388c9eab8273959b4ee28eebfbe0414a8185a0b25e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 28455836,
        "transactionHash": "0xcf1c456fafb13d55a0e417a94de6b6ded16bdf7cbcfc80f582a3a3a1a2d10a15",
        "address": "0x3795C36e7D12A8c252A20C5a7B455f7c57b60283",
        "topics": [
          "0xdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5"
        ],
        "data": "0x0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c",
        "logIndex": 17,
        "blockHash": "0x61203715836fe5aac7111f388c9eab8273959b4ee28eebfbe0414a8185a0b25e"
      }
    ],
    "blockNumber": 28455836,
    "cumulativeGasUsed": "5232510",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "76288b879984e90ff5cf74f5ec3dc709",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DelayPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DelayedTransferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelayedTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"EpochLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"EpochVolumeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxSendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinAddUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinSendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcTransferId\",\"type\":\"bytes32\"}],\"name\":\"Relay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resetTime\",\"type\":\"uint256\"}],\"name\":\"ResetNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"SignersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refid\",\"type\":\"bytes32\"}],\"name\":\"WithdrawDone\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addGovener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addseq\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delayedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumeCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"executeDelayedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"increaseNoticePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOpTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalMaxSlippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyResetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_relayRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeGovener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"resetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setDelayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setDelayThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"setEpochVolumeCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMaxSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minimalMaxSlippage\",\"type\":\"uint32\"}],\"name\":\"setMinimalMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newSigners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_curSigners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_curPowers\",\"type\":\"uint256[]\"}],\"name\":\"updateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"verifySigs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_wdmsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdraws\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSigners(address[],uint256[],bytes[],address[],uint256[])\":{\"params\":{\"_curPowers\":\"powers of current signers\",\"_curSigners\":\"sorted list of current signers\",\"_newSigners\":\"sorted list of new signers\",\"_sigs\":\"list of signatures sorted by signer addresses\"}},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_msg\":\"signed message\",\"_powers\":\"powers of current signers\",\"_signers\":\"sorted list of current signers\",\"_sigs\":\"list of signatures sorted by signer addresses\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resetSigners(address[],uint256[])\":{\"notice\":\"reset signers, only used for init setup and emergency recovery\"},\"updateSigners(address[],uint256[],bytes[],address[],uint256[])\":{\"notice\":\"Update new signers.\"},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Verifies that a message is signed by a quorum among the signers The sigs must be sorted by signer addresses in ascending order.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/PbBridge.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Bridge is Pool {\\n    using SafeERC20 for IERC20;\\n\\n    // liquidity events\\n    event Send(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        uint64 dstChainId,\\n        uint64 nonce,\\n        uint32 maxSlippage\\n    );\\n    event Relay(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        uint64 srcChainId,\\n        bytes32 srcTransferId\\n    );\\n    // gov events\\n    event MinSendUpdated(address token, uint256 amount);\\n    event MaxSendUpdated(address token, uint256 amount);\\n\\n    mapping(bytes32 => bool) public transfers;\\n    mapping(address => uint256) public minSend; // send _amount must > minSend\\n    mapping(address => uint256) public maxSend;\\n\\n    // min allowed max slippage uint32 value is slippage * 1M, eg. 0.5% -> 5000\\n    uint32 public minimalMaxSlippage;\\n\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage // slippage * 1M, eg. 0.5% -> 5000\\n    ) external nonReentrant whenNotPaused {\\n        require(_amount > minSend[_token], \\\"amount too small\\\");\\n        require(maxSend[_token] == 0 || _amount <= maxSend[_token], \\\"amount too large\\\");\\n        require(_maxSlippage > minimalMaxSlippage, \\\"max slippage too small\\\");\\n        bytes32 transferId = keccak256(\\n            // uint64(block.chainid) for consistency as entire system uses uint64 for chain id\\n            abi.encodePacked(msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Send(transferId, msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n    }\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external whenNotPaused {\\n        verifySigs(_relayRequest, _sigs, _signers, _powers);\\n        PbBridge.Relay memory request = PbBridge.decRelay(_relayRequest);\\n        require(request.dstChainId == block.chainid, \\\"dst chainId not match\\\");\\n\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(\\n                request.sender,\\n                request.receiver,\\n                request.token,\\n                request.amount,\\n                request.srcChainId,\\n                request.dstChainId,\\n                request.srcTransferId\\n            )\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n        updateVolume(request.token, request.amount);\\n        uint256 delayThreshold = delayThresholds[request.token];\\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\\n            addDelayedTransfer(transferId, request.receiver, request.token, request.amount);\\n        } else {\\n            if (request.token == nativeWrap) {\\n                // withdraw then transfer native to receiver\\n                IWETH(nativeWrap).withdraw(request.amount);\\n                (bool sent, ) = request.receiver.call{value: request.amount, gas: 50000}(\\\"\\\");\\n                require(sent, \\\"failed to relay native token\\\");\\n            } else {\\n                IERC20(request.token).safeTransfer(request.receiver, request.amount);\\n            }\\n        }\\n\\n        emit Relay(\\n            transferId,\\n            request.sender,\\n            request.receiver,\\n            request.token,\\n            request.amount,\\n            request.srcChainId,\\n            request.srcTransferId\\n        );\\n    }\\n\\n    function setMinSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            minSend[_tokens[i]] = _amounts[i];\\n            emit MinSendUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function setMaxSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            maxSend[_tokens[i]] = _amounts[i];\\n            emit MaxSendUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function setMinimalMaxSlippage(uint32 _minimalMaxSlippage) external onlyGovernor {\\n        minimalMaxSlippage = _minimalMaxSlippage;\\n    }\\n\\n    // This is needed to receive ETH when calling `IWETH.withdraw`\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7285f7e609881d164a6bdfc677f47655e028403392b4ab162a89fb3991aa9206\",\"license\":\"GPL-3.0-only\"},\"contracts/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa287f1f4e16a67737cc06dbeacb5e856d411125f51fca528a06d161cc26e2579\",\"license\":\"GPL-3.0-only\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/PbPool.sol\\\";\\nimport \\\"./Signers.sol\\\";\\nimport \\\"./Pauser.sol\\\";\\n\\n// add liquidity and withdraw\\n// withdraw can be used by user or liquidity provider\\n\\ninterface IWETH {\\n    function withdraw(uint256) external;\\n}\\n\\ncontract Pool is Signers, ReentrancyGuard, Pauser {\\n    using SafeERC20 for IERC20;\\n\\n    uint64 public addseq; // ensure unique LiquidityAdded event, start from 1\\n    mapping(address => uint256) public minAdd; // add _amount must > minAdd\\n\\n    // map of successful withdraws, if true means already withdrew money or added to delayedTransfers\\n    mapping(bytes32 => bool) public withdraws;\\n\\n    uint256 public epochLength; // seconds\\n    mapping(address => uint256) public epochVolumes; // key is token\\n    mapping(address => uint256) public epochVolumeCaps; // key is token\\n    mapping(address => uint256) public lastOpTimestamps; // key is token\\n\\n    struct delayedTransfer {\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\\n    mapping(address => uint256) public delayThresholds;\\n    uint256 public delayPeriod; // in seconds\\n\\n    // erc20 wrap of gas token of this chain, eg. WETH, when relay ie. pay out,\\n    // if request.token equals this, will withdraw and send native token to receiver\\n    // note we don't check whether it's zero address. when this isn't set, and request.token\\n    // is all 0 address, guarantee fail\\n    address public nativeWrap;\\n\\n    mapping(address => bool) public governors;\\n\\n    // liquidity events\\n    event LiquidityAdded(\\n        uint64 seqnum,\\n        address provider,\\n        address token,\\n        uint256 amount // how many tokens were added\\n    );\\n    event WithdrawDone(\\n        bytes32 withdrawId,\\n        uint64 seqnum,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes32 refid\\n    );\\n    event DelayedTransferAdded(bytes32 id);\\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\\n    // gov events\\n    event GovernorAdded(address account);\\n    event GovernorRemoved(address account);\\n    event EpochLengthUpdated(uint256 length);\\n    event EpochVolumeUpdated(address token, uint256 cap);\\n    event DelayPeriodUpdated(uint256 period);\\n    event DelayThresholdUpdated(address token, uint256 threshold);\\n    event MinAddUpdated(address token, uint256 amount);\\n\\n    constructor() {\\n        _addGovernor(msg.sender);\\n    }\\n\\n    function addLiquidity(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        addseq += 1;\\n        require(_amount > minAdd[_token], \\\"amount too small\\\");\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit LiquidityAdded(addseq, msg.sender, _token, _amount);\\n    }\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external whenNotPaused {\\n        verifySigs(_wdmsg, _sigs, _signers, _powers);\\n        // decode and check wdmsg\\n        PbPool.WithdrawMsg memory wdmsg = PbPool.decWithdrawMsg(_wdmsg);\\n        require(wdmsg.chainid == block.chainid, \\\"dst chainId mismatch\\\");\\n        bytes32 wdId = keccak256(\\n            abi.encodePacked(wdmsg.chainid, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount)\\n        );\\n        require(withdraws[wdId] == false, \\\"withdraw already succeeded\\\");\\n        withdraws[wdId] = true;\\n        updateVolume(wdmsg.token, wdmsg.amount);\\n        uint256 delayThreshold = delayThresholds[wdmsg.token];\\n        if (delayThreshold > 0 && wdmsg.amount > delayThreshold) {\\n            addDelayedTransfer(wdId, wdmsg.receiver, wdmsg.token, wdmsg.amount);\\n        } else {\\n            IERC20(wdmsg.token).safeTransfer(wdmsg.receiver, wdmsg.amount);\\n        }\\n        emit WithdrawDone(wdId, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount, wdmsg.refid);\\n    }\\n\\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\\n        delayedTransfer memory transfer = delayedTransfers[id];\\n        require(transfer.timestamp > 0, \\\"transfer not exist\\\");\\n        require(block.timestamp > transfer.timestamp + delayPeriod, \\\"transfer still locked\\\");\\n        delete delayedTransfers[id];\\n        if (transfer.token == nativeWrap && withdraws[id] == false) {\\n            // withdraw then transfer native to receiver\\n            IWETH(nativeWrap).withdraw(transfer.amount);\\n            (bool sent, ) = transfer.receiver.call{value: transfer.amount, gas: 50000}(\\\"\\\");\\n            require(sent, \\\"failed to relay native token\\\");\\n        } else {\\n            IERC20(transfer.token).safeTransfer(transfer.receiver, transfer.amount);\\n        }\\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\\n    }\\n\\n    function setEpochLength(uint256 _length) external onlyGovernor {\\n        epochLength = _length;\\n        emit EpochLengthUpdated(_length);\\n    }\\n\\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\\n        require(_tokens.length == _caps.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            epochVolumeCaps[_tokens[i]] = _caps[i];\\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\\n        }\\n    }\\n\\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\\n        require(_tokens.length == _thresholds.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            delayThresholds[_tokens[i]] = _thresholds[i];\\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\\n        }\\n    }\\n\\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\\n        delayPeriod = _period;\\n        emit DelayPeriodUpdated(_period);\\n    }\\n\\n    function setMinAdd(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            minAdd[_tokens[i]] = _amounts[i];\\n            emit MinAddUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function updateVolume(address _token, uint256 _amount) internal {\\n        if (epochLength == 0) {\\n            return;\\n        }\\n        uint256 cap = epochVolumeCaps[_token];\\n        if (cap == 0) {\\n            return;\\n        }\\n        uint256 volume = epochVolumes[_token];\\n        uint256 timestamp = block.timestamp;\\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\\n        if (lastOpTimestamps[_token] < epochStartTime) {\\n            volume = _amount;\\n        } else {\\n            volume += _amount;\\n        }\\n        require(volume <= cap, \\\"volume exceeds cap\\\");\\n        epochVolumes[_token] = volume;\\n        lastOpTimestamps[_token] = timestamp;\\n    }\\n\\n    function addDelayedTransfer(\\n        bytes32 id,\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        // note: rely on caller for id uniquess\\n        // current ids are relay transfer id and withdrawal id\\n        delayedTransfers[id] = delayedTransfer({\\n            receiver: receiver,\\n            token: token,\\n            amount: amount,\\n            timestamp: block.timestamp\\n        });\\n        emit DelayedTransferAdded(id);\\n    }\\n\\n    // set nativeWrap, for relay requests, if token == nativeWrap, will withdraw first then transfer native to receiver\\n    function setWrap(address _weth) external onlyOwner {\\n        nativeWrap = _weth;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(isGovernor(msg.sender), \\\"Caller is not governor\\\");\\n        _;\\n    }\\n\\n    function isGovernor(address _account) public view returns (bool) {\\n        return governors[_account];\\n    }\\n\\n    function addGovener(address _account) public onlyOwner {\\n        _addGovernor(_account);\\n    }\\n\\n    function removeGovener(address _account) public onlyOwner {\\n        _removeGovernor(_account);\\n    }\\n\\n    function renounceGovener() public {\\n        _removeGovernor(msg.sender);\\n    }\\n\\n    function _addGovernor(address _account) private {\\n        require(!isGovernor(_account), \\\"Account is already governor\\\");\\n        governors[_account] = true;\\n        emit GovernorAdded(_account);\\n    }\\n\\n    function _removeGovernor(address _account) private {\\n        require(isGovernor(_account), \\\"Account is not governor\\\");\\n        governors[_account] = false;\\n        emit GovernorRemoved(_account);\\n    }\\n}\\n\",\"keccak256\":\"0xb3aec8acaad2311f0bf2550cffd0d3a61ca8d2c34e1886454e829e4ea981b02e\",\"license\":\"GPL-3.0-only\"},\"contracts/Signers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISigsVerifier.sol\\\";\\n\\ncontract Signers is Ownable, ISigsVerifier {\\n    using ECDSA for bytes32;\\n\\n    bytes32 public ssHash;\\n\\n    // reset can be called by the owner address for emergency recovery\\n    uint256 public resetTime;\\n    uint256 public noticePeriod; // advance notice period as seconds for reset\\n    uint256 constant MAX_INT = 2**256 - 1;\\n\\n    event SignersUpdated(address[] _signers, uint256[] _powers);\\n\\n    event ResetNotification(uint256 resetTime);\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers\\n     * The sigs must be sorted by signer addresses in ascending order.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public view override {\\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\\n        require(ssHash == h, \\\"Mismatch current signers\\\");\\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\\n    }\\n\\n    /**\\n     * @notice Update new signers.\\n     * @param _newSigners sorted list of new signers\\n     * @param _curPowers powers of new signers\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _curSigners sorted list of current signers\\n     * @param _curPowers powers of current signers\\n     */\\n    function updateSigners(\\n        address[] calldata _newSigners,\\n        uint256[] calldata _newPowers,\\n        bytes[] calldata _sigs,\\n        address[] calldata _curSigners,\\n        uint256[] calldata _curPowers\\n    ) external {\\n        verifySigs(abi.encodePacked(_newSigners, _newPowers), _sigs, _curSigners, _curPowers);\\n        _updateSigners(_newSigners, _newPowers);\\n    }\\n\\n    /**\\n     * @notice reset signers, only used for init setup and emergency recovery\\n     */\\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\\n        require(block.timestamp > resetTime, \\\"not reach reset time\\\");\\n        resetTime = MAX_INT;\\n        _updateSigners(_signers, _powers);\\n    }\\n\\n    function notifyResetSigners() external onlyOwner {\\n        resetTime = block.timestamp + noticePeriod;\\n        emit ResetNotification(resetTime);\\n    }\\n\\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\\n        require(period > noticePeriod, \\\"notice period can only be increased\\\");\\n        noticePeriod = period;\\n    }\\n\\n    // separate from verifySigs func to avoid \\\"stack too deep\\\" issue\\n    function _verifySignedPowers(\\n        bytes32 _hash,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) private pure {\\n        require(_signers.length == _powers.length, \\\"signers and powers length not match\\\");\\n        uint256 totalPower; // sum of all signer.power\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            totalPower += _powers[i];\\n        }\\n        uint256 quorum = (totalPower * 2) / 3 + 1;\\n\\n        uint256 signedPower; // sum of signer powers who are in sigs\\n        address prev = address(0);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\n            address signer = _hash.recover(_sigs[i]);\\n            require(signer > prev, \\\"signers not in ascending order\\\");\\n            prev = signer;\\n            // now find match signer add its power\\n            while (signer > _signers[index]) {\\n                index += 1;\\n                require(index < _signers.length, \\\"signer not found\\\");\\n            }\\n            if (signer == _signers[index]) {\\n                signedPower += _powers[index];\\n            }\\n            if (signedPower >= quorum) {\\n                // return early to save gas\\n                return;\\n            }\\n        }\\n        revert(\\\"quorum not reached\\\");\\n    }\\n\\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\\n        require(_signers.length == _powers.length, \\\"signers and powers length not match\\\");\\n        address prev = address(0);\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            require(_signers[i] > prev, \\\"New signers not in ascending order\\\");\\n            prev = _signers[i];\\n        }\\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\\n        emit SignersUpdated(_signers, _powers);\\n    }\\n}\\n\",\"keccak256\":\"0xc213644b32eac432cf62a8a4105de3a2a717f537c6c98f2588f5efa129c92e9d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xbc3887db62a3dfc74137f8d5d8236533b035501929772aa8e512d3df0bc85341\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: bridge.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbBridge {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Relay {\\n        address sender; // tag: 1\\n        address receiver; // tag: 2\\n        address token; // tag: 3\\n        uint256 amount; // tag: 4\\n        uint64 srcChainId; // tag: 5\\n        uint64 dstChainId; // tag: 6\\n        bytes32 srcTransferId; // tag: 7\\n    } // end struct Relay\\n\\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.sender = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.srcChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.dstChainId = uint64(buf.decVarint());\\n            } else if (tag == 7) {\\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Relay\\n}\\n\",\"keccak256\":\"0xe7f444d4bddc65637fd050d5f8e42ee781f7a00f97cb403e786b891418d0a1e0\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pool.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPool {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct WithdrawMsg {\\n        uint64 chainid; // tag: 1\\n        uint64 seqnum; // tag: 2\\n        address receiver; // tag: 3\\n        address token; // tag: 4\\n        uint256 amount; // tag: 5\\n        bytes32 refid; // tag: 6\\n    } // end struct WithdrawMsg\\n\\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.chainid = uint64(buf.decVarint());\\n            } else if (tag == 2) {\\n                m.seqnum = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 6) {\\n                m.refid = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder WithdrawMsg\\n}\\n\",\"keccak256\":\"0x7efd38eaa0f2d7a1ed9070e7bc940ecd041c59f5c48aba26174c46f99991f63d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000048565b60016004556005805460ff19169055620000373362000098565b620000423362000162565b62000222565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526006602052604090205460ff1615620001075760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260066020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f891015b60405180910390a150565b6001600160a01b03811660009081526012602052604090205460ff1615620001cd5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401620000fe565b6001600160a01b038116600081815260126020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5910162000157565b614a1880620002326000396000f3fe60806040526004361061034e5760003560e01c806382dc1ec4116101bb578063b1c94d94116100f7578063e43581b811610095578063f20c922a1161006f578063f20c922a14610a72578063f2fde38b14610a92578063f832138314610ab2578063f8b30d7d14610adf57600080fd5b8063e43581b814610a04578063e999e5f414610a3d578063edd75e2014610a5d57600080fd5b8063cdd1b25d116100d1578063cdd1b25d1461096e578063d0790da91461098e578063e09ab428146109a4578063e3eece26146109d457600080fd5b8063b1c94d94146108fe578063b5f2bc4714610914578063ccde517a1461094157600080fd5b80639b14d4c611610164578063a21a92801161013e578063a21a928014610824578063a5977fbb14610844578063a7bdf45a14610864578063adc0d57f1461088457600080fd5b80639b14d4c6146107ce5780639e25fc5c146107e45780639ff9001a1461080457600080fd5b806389e391271161019557806389e39127146107565780638d8afa17146107905780638da5cb5b146107b057600080fd5b806382dc1ec4146107015780638456cb5914610721578063878fe1ce1461073657600080fd5b806354eea7961161028a57806365a114f1116102335780636ef8d66d1161020d5780636ef8d66d14610687578063715018a61461069c5780637d5a232f146106b157806380f51c12146106d157600080fd5b806365a114f114610631578063682dbc22146106475780636b2c0f551461066757600080fd5b80635c975abb116102645780635c975abb146105bf57806360216b00146105d7578063618ee0551461060457600080fd5b806354eea79614610569578063566887001461058957806357d775f8146105a957600080fd5b80633f4ba83a116102f757806346fbf68e116102d157806346fbf68e146104b557806347b16c6c146104ee578063482341261461050e57806352532faa1461052e57600080fd5b80633f4ba83a1461044857806344a848af1461045d578063457bfa2f1461047d57600080fd5b80632fd1b0a4116103285780632fd1b0a4146103b15780633c64f04b146103e85780633d5721071461042857600080fd5b8063089927411461035a57806317bdbae51461037c57806325c38b9f1461039c57600080fd5b3661035557005b600080fd5b34801561036657600080fd5b5061037a610375366004614241565b610b0c565b005b34801561038857600080fd5b5061037a610397366004614241565b610caf565b3480156103a857600080fd5b5061037a610e46565b3480156103bd57600080fd5b506016546103ce9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b3480156103f457600080fd5b506104186104033660046142ad565b60136020526000908152604090205460ff1681565b60405190151581526020016103df565b34801561043457600080fd5b5061037a6104433660046142ad565b610ed6565b34801561045457600080fd5b5061037a610f6a565b34801561046957600080fd5b5061037a6104783660046142e2565b610fd3565b34801561048957600080fd5b5060115461049d906001600160a01b031681565b6040516001600160a01b0390911681526020016103df565b3480156104c157600080fd5b506104186104d03660046142e2565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104fa57600080fd5b5061037a610509366004614241565b611027565b34801561051a57600080fd5b5061037a610529366004614311565b6111be565b34801561053a57600080fd5b5061055b6105493660046142e2565b600f6020526000908152604090205481565b6040519081526020016103df565b34801561057557600080fd5b5061037a6105843660046142ad565b611232565b34801561059557600080fd5b5061037a6105a436600461432c565b6112bf565b3480156105b557600080fd5b5061055b600a5481565b3480156105cb57600080fd5b5060055460ff16610418565b3480156105e357600080fd5b5061055b6105f23660046142e2565b600b6020526000908152604090205481565b34801561061057600080fd5b5061055b61061f3660046142e2565b60156020526000908152604090205481565b34801561063d57600080fd5b5061055b60025481565b34801561065357600080fd5b5061037a61066236600461436c565b611483565b34801561067357600080fd5b5061037a6106823660046142e2565b61156f565b34801561069357600080fd5b5061037a6115c0565b3480156106a857600080fd5b5061037a6115c9565b3480156106bd57600080fd5b5061037a6106cc36600461449a565b61161b565b3480156106dd57600080fd5b506104186106ec3660046142e2565b60066020526000908152604090205460ff1681565b34801561070d57600080fd5b5061037a61071c3660046142e2565b611667565b34801561072d57600080fd5b5061037a6116b8565b34801561074257600080fd5b5061037a610751366004614241565b61171f565b34801561076257600080fd5b506007546107779067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016103df565b34801561079c57600080fd5b5061037a6107ab3660046142e2565b6118b6565b3480156107bc57600080fd5b506000546001600160a01b031661049d565b3480156107da57600080fd5b5061055b60035481565b3480156107f057600080fd5b5061037a6107ff3660046142ad565b611907565b34801561081057600080fd5b5061037a61081f3660046142e2565b611c63565b34801561083057600080fd5b5061037a61083f36600461458b565b611ccd565b34801561085057600080fd5b5061037a61085f366004614692565b612024565b34801561087057600080fd5b5061037a61087f366004614241565b612387565b34801561089057600080fd5b506108d361089f3660046142ad565b600e6020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016103df565b34801561090a57600080fd5b5061055b60105481565b34801561092057600080fd5b5061055b61092f3660046142e2565b600c6020526000908152604090205481565b34801561094d57600080fd5b5061055b61095c3660046142e2565b60086020526000908152604090205481565b34801561097a57600080fd5b5061037a61098936600461458b565b612438565b34801561099a57600080fd5b5061055b60015481565b3480156109b057600080fd5b506104186109bf3660046142ad565b60096020526000908152604090205460ff1681565b3480156109e057600080fd5b506104186109ef3660046142e2565b60126020526000908152604090205460ff1681565b348015610a1057600080fd5b50610418610a1f3660046142e2565b6001600160a01b031660009081526012602052604090205460ff1690565b348015610a4957600080fd5b5061037a610a58366004614241565b6128c6565b348015610a6957600080fd5b5061037a612a5d565b348015610a7e57600080fd5b5061037a610a8d3660046142ad565b612a66565b348015610a9e57600080fd5b5061037a610aad3660046142e2565b612b10565b348015610abe57600080fd5b5061055b610acd3660046142e2565b600d6020526000908152604090205481565b348015610aeb57600080fd5b5061055b610afa3660046142e2565b60146020526000908152604090205481565b3360009081526012602052604090205460ff16610b695760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b828114610baa5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca857828282818110610bc757610bc76146ff565b9050602002013560146000878785818110610be457610be46146ff565b9050602002016020810190610bf991906142e2565b6001600160a01b031681526020810191909152604001600020557f8b59d386e660418a48d742213ad5ce7c4dd51ae81f30e4e2c387f17d907010c9858583818110610c4657610c466146ff565b9050602002016020810190610c5b91906142e2565b848484818110610c6d57610c6d6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610ca08161472b565b915050610bad565b5050505050565b3360009081526012602052604090205460ff16610d075760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b828114610d485760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca857828282818110610d6557610d656146ff565b90506020020135600f6000878785818110610d8257610d826146ff565b9050602002016020810190610d9791906142e2565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610de457610de46146ff565b9050602002016020810190610df991906142e2565b848484818110610e0b57610e0b6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610e3e8161472b565b915050610d4b565b6000546001600160a01b03163314610e8e5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b600354610e9b9042614746565b60028190556040519081527f68e825132f7d4bc837dea2d64ac9fc19912bf0224b67f9317d8f1a917f5304a1906020015b60405180910390a1565b3360009081526012602052604090205460ff16610f2e5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b60108190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526006602052604090205460ff16610fc95760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610b60565b610fd1612bdd565b565b6000546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b61102481612c74565b50565b3360009081526012602052604090205460ff1661107f5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b8281146110c05760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca8578282828181106110dd576110dd6146ff565b90506020020135600c60008787858181106110fa576110fa6146ff565b905060200201602081019061110f91906142e2565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061115c5761115c6146ff565b905060200201602081019061117191906142e2565b848484818110611183576111836146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806111b68161472b565b9150506110c3565b3360009081526012602052604090205460ff166112165760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b6016805463ffffffff191663ffffffff92909216919091179055565b3360009081526012602052604090205460ff1661128a5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b600a8190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001610f5f565b600260045414156113125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b60565b600260045560055460ff161561135d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b600780546001919060009061137d90849067ffffffffffffffff1661475e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060086000836001600160a01b03166001600160a01b0316815260200190815260200160002054811161140a5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610b60565b61141f6001600160a01b038316333084612d2d565b6007546040805167ffffffffffffffff90921682523360208301526001600160a01b0384168282015260608201839052517fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce7649181900360800190a150506001600455565b60008484848460405160200161149c949392919061478a565b60405160208183030381529060405280519060200120905080600154146115055760405162461bcd60e51b815260206004820152601860248201527f4d69736d617463682063757272656e74207369676e65727300000000000000006044820152606401610b60565b87516020808a0191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012061156590888888888888612dc5565b5050505050505050565b6000546001600160a01b031633146115b75760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816130fb565b610fd1336130fb565b6000546001600160a01b031633146116115760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b610fd160006131b4565b61164f8a8a8a8a604051602001611635949392919061478a565b604051602081830303815290604052878787878787611483565b61165b8a8a8a8a613204565b50505050505050505050565b6000546001600160a01b031633146116af5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816133ae565b3360009081526006602052604090205460ff166117175760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610b60565b610fd161346b565b3360009081526012602052604090205460ff166117775760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b8281146117b85760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca8578282828181106117d5576117d56146ff565b90506020020135601560008787858181106117f2576117f26146ff565b905060200201602081019061180791906142e2565b6001600160a01b031681526020810191909152604001600020557f4f12d1a5bfb3ccd3719255d4d299d808d50cdca9a0a5c2b3a5aaa7edde73052c858583818110611854576118546146ff565b905060200201602081019061186991906142e2565b84848481811061187b5761187b6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806118ae8161472b565b9150506117bb565b6000546001600160a01b031633146118fe5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816134e6565b60055460ff161561194d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6000818152600e6020908152604091829020825160808101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600390910154606082018190526119e85760405162461bcd60e51b815260206004820152601260248201527f7472616e73666572206e6f7420657869737400000000000000000000000000006044820152606401610b60565b60105481606001516119fa9190614746565b4211611a485760405162461bcd60e51b815260206004820152601560248201527f7472616e73666572207374696c6c206c6f636b656400000000000000000000006044820152606401610b60565b6000828152600e60209081526040822080546001600160a01b0319908116825560018201805490911690556002810183905560030191909155601154908201516001600160a01b039081169116148015611ab1575060008281526009602052604090205460ff16155b15611bd5576011546040808301519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91611aed9160040190815260200190565b600060405180830381600087803b158015611b0757600080fd5b505af1158015611b1b573d6000803e3d6000fd5b50505050600081600001516001600160a01b0316826040015161c35090604051600060405180830381858888f193505050503d8060008114611b79576040519150601f19603f3d011682016040523d82523d6000602084013e611b7e565b606091505b5050905080611bcf5760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2072656c6179206e617469766520746f6b656e000000006044820152606401610b60565b50611bf6565b805160408201516020830151611bf6926001600160a01b03909116916135a3565b7f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d442682826000015183602001518460400151604051611c5794939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050565b6000546001600160a01b03163314611cab5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b60055460ff1615611d135760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b611d5a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050878787611483565b6000611d9b89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506135d892505050565b805190915067ffffffffffffffff164614611df85760405162461bcd60e51b815260206004820152601460248201527f64737420636861696e4964206d69736d617463680000000000000000000000006044820152606401610b60565b8051602080830151604080850151606086015160808701519251600096611e6b96909594910160c095861b6001600160c01b031990811682529490951b9093166008850152606091821b6bffffffffffffffffffffffff199081166010860152911b166024830152603882015260580190565b60408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff1615611ee35760405162461bcd60e51b815260206004820152601a60248201527f776974686472617720616c7265616479207375636365656465640000000000006044820152606401610b60565b6000818152600960205260409020805460ff1916600117905560608201516080830151611f109190613738565b60608201516001600160a01b03166000908152600f60205260409020548015801590611f3f5750808360800151115b15611f6157611f5c82846040015185606001518660800151613850565b611f8b565b611f8b8360400151846080015185606001516001600160a01b03166135a39092919063ffffffff16565b7f48a1ab26f3aa7b62bb6b6e8eed182f292b84eb7b006c0254386b268af20774be8284602001518560400151866060015187608001518860a0015160405161200f9695949392919095865267ffffffffffffffff9490941660208601526001600160a01b03928316604086015291166060840152608083015260a082015260c00190565b60405180910390a15050505050505050505050565b600260045414156120775760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b60565b600260045560055460ff16156120c25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6001600160a01b038516600090815260146020526040902054841161211c5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610b60565b6001600160a01b038516600090815260156020526040902054158061215957506001600160a01b0385166000908152601560205260409020548411155b6121a55760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610b60565b60165463ffffffff908116908216116122005760405162461bcd60e51b815260206004820152601660248201527f6d617820736c69707061676520746f6f20736d616c6c000000000000000000006044820152606401610b60565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288811b8216603484015287901b166048820152605c81018590526001600160c01b031960c085811b8216607c84015284811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152601390935291205490915060ff16156122d05760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610b60565b6000818152601360205260409020805460ff191660011790556122fe6001600160a01b038716333088612d2d565b604080518281523360208201526001600160a01b0389811682840152881660608201526080810187905267ffffffffffffffff86811660a0830152851660c082015263ffffffff841660e082015290517f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f01918190036101000190a1505060016004555050505050565b6000546001600160a01b031633146123cf5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b60025442116124205760405162461bcd60e51b815260206004820152601460248201527f6e6f742072656163682072657365742074696d650000000000000000000000006044820152606401610b60565b60001960025561243284848484613204565b50505050565b60055460ff161561247e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6124c588888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050878787611483565b600061250689898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061390492505050565b9050468160a0015167ffffffffffffffff16146125655760405162461bcd60e51b815260206004820152601560248201527f64737420636861696e4964206e6f74206d6174636800000000000000000000006044820152606401610b60565b8051602080830151604080850151606080870151608088015160a089015160c0808b015187519a861b6bffffffffffffffffffffffff199081168c8c015298861b891660348c01529590941b9096166048890152605c880191909152811b6001600160c01b0319908116607c88015293901b9092166084850152608c808501929092528051808503909201825260ac9093018352805190820120600081815260139092529190205460ff161561264f5760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610b60565b60008181526013602052604090819020805460ff19166001179055820151606083015161267c9190613738565b6040808301516001600160a01b03166000908152600f602052205480158015906126a95750808360600151115b156126cb576126c682846020015185604001518660600151613850565b61282f565b60115460408401516001600160a01b0390811691161415612805576011546060840151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161271d9160040190815260200190565b600060405180830381600087803b15801561273757600080fd5b505af115801561274b573d6000803e3d6000fd5b50505050600083602001516001600160a01b0316846060015161c35090604051600060405180830381858888f193505050503d80600081146127a9576040519150601f19603f3d011682016040523d82523d6000602084013e6127ae565b606091505b50509050806127ff5760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2072656c6179206e617469766520746f6b656e000000006044820152606401610b60565b5061282f565b61282f8360200151846060015185604001516001600160a01b03166135a39092919063ffffffff16565b7f79fa08de5149d912dce8e5e8da7a7c17ccdf23dd5d3bfe196802e6eb86347c7c82846000015185602001518660400151876060015188608001518960c0015160405161200f97969594939291909687526001600160a01b0395861660208801529385166040870152919093166060850152608084019290925267ffffffffffffffff9190911660a083015260c082015260e00190565b3360009081526012602052604090205460ff1661291e5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b82811461295f5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca85782828281811061297c5761297c6146ff565b9050602002013560086000878785818110612999576129996146ff565b90506020020160208101906129ae91906142e2565b6001600160a01b031681526020810191909152604001600020557fc56b0d14c4940515800d94ebbd0f3f5d8cc58ba1109c12536bd993b72e466e4f8585838181106129fb576129fb6146ff565b9050602002016020810190612a1091906142e2565b848484818110612a2257612a226146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180612a558161472b565b915050612962565b610fd133612c74565b6000546001600160a01b03163314612aae5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b6003548111612b0b5760405162461bcd60e51b815260206004820152602360248201527f6e6f7469636520706572696f642063616e206f6e6c7920626520696e637265616044820152621cd95960ea1b6064820152608401610b60565b600355565b6000546001600160a01b03163314612b585760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b6001600160a01b038116612bd45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b60565b611024816131b4565b60055460ff16612c2f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b60565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610ecc565b6001600160a01b03811660009081526012602052604090205460ff16612cdc5760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610b60565b6001600160a01b038116600081815260126020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101610f5f565b6040516001600160a01b03808516602483015283166044820152606481018290526124329085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613a7c565b828114612e205760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610b60565b6000805b84811015612e6457838382818110612e3e57612e3e6146ff565b9050602002013582612e509190614746565b915080612e5c8161472b565b915050612e24565b5060006003612e748360026147ee565b612e7e919061480d565b612e89906001614746565b905060008080805b8a8110156130a9576000612f148d8d84818110612eb057612eb06146ff565b9050602002810190612ec2919061482f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f613b6190919063ffffffff16565b9050836001600160a01b0316816001600160a01b031611612f775760405162461bcd60e51b815260206004820152601e60248201527f7369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610b60565b8093505b8a8a84818110612f8d57612f8d6146ff565b9050602002016020810190612fa291906142e2565b6001600160a01b0316816001600160a01b0316111561301c57612fc6600184614746565b92508983106130175760405162461bcd60e51b815260206004820152601060248201527f7369676e6572206e6f7420666f756e64000000000000000000000000000000006044820152606401610b60565b612f7b565b8a8a8481811061302e5761302e6146ff565b905060200201602081019061304391906142e2565b6001600160a01b0316816001600160a01b031614156130835788888481811061306e5761306e6146ff565b90506020020135856130809190614746565b94505b85851061309657505050505050506130f2565b50806130a18161472b565b915050612e91565b5060405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610b60565b50505050505050565b6001600160a01b03811660009081526006602052604090205460ff166131635760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610b60565b6001600160a01b038116600081815260066020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610f5f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82811461325f5760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610b60565b6000805b8481101561333857816001600160a01b0316868683818110613287576132876146ff565b905060200201602081019061329c91906142e2565b6001600160a01b0316116132fd5760405162461bcd60e51b815260206004820152602260248201527f4e6577207369676e657273206e6f7420696e20617363656e64696e67206f726460448201526132b960f11b6064820152608401610b60565b85858281811061330f5761330f6146ff565b905060200201602081019061332491906142e2565b9150806133308161472b565b915050613263565b5084848484604051602001613350949392919061478a565b60408051601f198184030181529082905280516020909101206001557ff126123539a68393c55697f617e7d1148e371988daed246c2f41da99965a23f89061339f908790879087908790614876565b60405180910390a15050505050565b6001600160a01b03811660009081526006602052604090205460ff16156134175760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610b60565b6001600160a01b038116600081815260066020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610f5f565b60055460ff16156134b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c5c3390565b6001600160a01b03811660009081526012602052604090205460ff161561354f5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610b60565b6001600160a01b038116600081815260126020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101610f5f565b6040516001600160a01b0383166024820152604481018290526135d390849063a9059cbb60e01b90606401612d61565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156137305761363683613c0b565b9092509050816001141561365e5761364d83613c45565b67ffffffffffffffff16845261361f565b81600214156136845761367083613c45565b67ffffffffffffffff16602085015261361f565b81600314156136b15761369e61369984613cc7565b613d84565b6001600160a01b0316604085015261361f565b81600414156136d9576136c661369984613cc7565b6001600160a01b0316606085015261361f565b81600514156136fd576136f36136ee84613cc7565b613d8f565b608085015261361f565b81600614156137215761371761371284613cc7565b613dc6565b60a085015261361f565b61372b8382613dde565b61361f565b505050919050565b600a54613743575050565b6001600160a01b0382166000908152600c60205260409020548061376657505050565b6001600160a01b0383166000908152600b6020526040812054600a5490914291613790818461480d565b61379a91906147ee565b6001600160a01b0387166000908152600d60205260409020549091508111156137c5578492506137d2565b6137cf8584614746565b92505b838311156138225760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610b60565b506001600160a01b039094166000908152600b6020908152604080832093909355600d905220929092555050565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600e90935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906138f69086815260200190565b60405180910390a150505050565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905283518085019094528184528301849052909190805b602083015151835110156137305761396983613c0b565b909250905081600114156139935761398361369984613cc7565b6001600160a01b03168452613952565b81600214156139bb576139a861369984613cc7565b6001600160a01b03166020850152613952565b81600314156139e3576139d061369984613cc7565b6001600160a01b03166040850152613952565b8160041415613a02576139f86136ee84613cc7565b6060850152613952565b8160051415613a2857613a1483613c45565b67ffffffffffffffff166080850152613952565b8160061415613a4e57613a3a83613c45565b67ffffffffffffffff1660a0850152613952565b8160071415613a6d57613a6361371284613cc7565b60c0850152613952565b613a778382613dde565b613952565b6000613ad1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e509092919063ffffffff16565b8051909150156135d35780806020019051810190613aef91906148f8565b6135d35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b60565b6000815160411415613b955760208201516040830151606084015160001a613b8b86828585613e69565b9350505050613c05565b815160401415613bbd5760208201516040830151613bb4858383614012565b92505050613c05565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b60565b92915050565b6000806000613c1984613c45565b9050613c2660088261480d565b9250806007166005811115613c3d57613c3d61491a565b915050915091565b602080820151825181019091015160009182805b600a811015613cc15783811a9150613c728160076147ee565b82607f16901b851794508160801660001415613caf57613c93816001614746565b86518790613ca2908390614746565b9052509395945050505050565b80613cb98161472b565b915050613c59565b50600080fd5b60606000613cd483613c45565b90506000818460000151613ce89190614746565b9050836020015151811115613cfc57600080fd5b8167ffffffffffffffff811115613d1557613d15614356565b6040519080825280601f01601f191660200182016040528015613d3f576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015613d79578181015183820152613d72602082614746565b9050613d57565b505050935250919050565b6000613c0582614055565b6000602082511115613da057600080fd5b6020820151905081516020613db59190614930565b613dc09060086147ee565b1c919050565b60008151602014613dd657600080fd5b506020015190565b6000816005811115613df257613df261491a565b1415613e01576135d382613c45565b6002816005811115613e1557613e1561491a565b1415610355576000613e2683613c45565b90508083600001818151613e3a9190614746565b905250602083015151835111156135d357600080fd5b6060613e5f848460008561407d565b90505b9392505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613ee65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b60565b8360ff16601b1480613efb57508360ff16601c145b613f525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610b60565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613fa6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140095760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b60565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b0161404b86828785613e69565b9695505050505050565b6000815160141461406557600080fd5b50602001516c01000000000000000000000000900490565b6060824710156140f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b60565b843b6141435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b60565b600080866001600160a01b0316858760405161415f9190614973565b60006040518083038185875af1925050503d806000811461419c576040519150601f19603f3d011682016040523d82523d6000602084013e6141a1565b606091505b50915091506141b18282866141bc565b979650505050505050565b606083156141cb575081613e62565b8251156141db5782518084602001fd5b8160405162461bcd60e51b8152600401610b60919061498f565b60008083601f84011261420757600080fd5b50813567ffffffffffffffff81111561421f57600080fd5b6020830191508360208260051b850101111561423a57600080fd5b9250929050565b6000806000806040858703121561425757600080fd5b843567ffffffffffffffff8082111561426f57600080fd5b61427b888389016141f5565b9096509450602087013591508082111561429457600080fd5b506142a1878288016141f5565b95989497509550505050565b6000602082840312156142bf57600080fd5b5035919050565b80356001600160a01b03811681146142dd57600080fd5b919050565b6000602082840312156142f457600080fd5b613e62826142c6565b803563ffffffff811681146142dd57600080fd5b60006020828403121561432357600080fd5b613e62826142fd565b6000806040838503121561433f57600080fd5b614348836142c6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060006080888a03121561438757600080fd5b873567ffffffffffffffff8082111561439f57600080fd5b818a0191508a601f8301126143b357600080fd5b8135818111156143c5576143c5614356565b604051601f8201601f19908116603f011681019083821181831017156143ed576143ed614356565b816040528281528d602084870101111561440657600080fd5b82602086016020830137600094508460208483010152809b5050505060208a013581811115614433578283fd5b61443f8c828d016141f5565b90995097505060408a013581811115614456578283fd5b6144628c828d016141f5565b90975095505060608a013581811115614479578283fd5b6144858c828d016141f5565b9a9d999c50979a509598949794955050505050565b60008060008060008060008060008060a08b8d0312156144b957600080fd5b8a3567ffffffffffffffff808211156144d157600080fd5b6144dd8e838f016141f5565b909c509a5060208d01359150808211156144f657600080fd5b6145028e838f016141f5565b909a50985060408d013591508082111561451b57600080fd5b6145278e838f016141f5565b909850965060608d013591508082111561454057600080fd5b61454c8e838f016141f5565b909650945060808d013591508082111561456557600080fd5b506145728d828e016141f5565b915080935050809150509295989b9194979a5092959850565b6000806000806000806000806080898b0312156145a757600080fd5b883567ffffffffffffffff808211156145bf57600080fd5b818b0191508b601f8301126145d357600080fd5b8135818111156145e257600080fd5b8c60208285010111156145f457600080fd5b60209283019a509850908a0135908082111561460f57600080fd5b61461b8c838d016141f5565b909850965060408b013591508082111561463457600080fd5b6146408c838d016141f5565b909650945060608b013591508082111561465957600080fd5b506146668b828c016141f5565b999c989b5096995094979396929594505050565b803567ffffffffffffffff811681146142dd57600080fd5b60008060008060008060c087890312156146ab57600080fd5b6146b4876142c6565b95506146c2602088016142c6565b9450604087013593506146d76060880161467a565b92506146e56080880161467a565b91506146f360a088016142fd565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561473f5761473f614715565b5060010190565b6000821982111561475957614759614715565b500190565b600067ffffffffffffffff80831681851680830382111561478157614781614715565b01949350505050565b60008186825b878110156147bf576001600160a01b036147a9836142c6565b1683526020928301929190910190600101614790565b50506001600160fb1b038411156147d557600080fd5b8360051b80868337600091019081529695505050505050565b600081600019048311821515161561480857614808614715565b500290565b60008261482a57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261484657600080fd5b83018035915067ffffffffffffffff82111561486157600080fd5b60200191503681900382131561423a57600080fd5b6040808252810184905260008560608301825b878110156148b7576001600160a01b036148a2846142c6565b16825260209283019290910190600101614889565b5083810360208501528481526001600160fb1b038511156148d757600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b60006020828403121561490a57600080fd5b81518015158114613e6257600080fd5b634e487b7160e01b600052602160045260246000fd5b60008282101561494257614942614715565b500390565b60005b8381101561496257818101518382015260200161494a565b838111156124325750506000910152565b60008251614985818460208701614947565b9190910192915050565b60208152600082518060208401526149ae816040850160208701614947565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212203f14fea0a73c0d3c92d4acb9575964e24ae96cd02f6a44ac4a3a6bd6f6e2ab8a64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061034e5760003560e01c806382dc1ec4116101bb578063b1c94d94116100f7578063e43581b811610095578063f20c922a1161006f578063f20c922a14610a72578063f2fde38b14610a92578063f832138314610ab2578063f8b30d7d14610adf57600080fd5b8063e43581b814610a04578063e999e5f414610a3d578063edd75e2014610a5d57600080fd5b8063cdd1b25d116100d1578063cdd1b25d1461096e578063d0790da91461098e578063e09ab428146109a4578063e3eece26146109d457600080fd5b8063b1c94d94146108fe578063b5f2bc4714610914578063ccde517a1461094157600080fd5b80639b14d4c611610164578063a21a92801161013e578063a21a928014610824578063a5977fbb14610844578063a7bdf45a14610864578063adc0d57f1461088457600080fd5b80639b14d4c6146107ce5780639e25fc5c146107e45780639ff9001a1461080457600080fd5b806389e391271161019557806389e39127146107565780638d8afa17146107905780638da5cb5b146107b057600080fd5b806382dc1ec4146107015780638456cb5914610721578063878fe1ce1461073657600080fd5b806354eea7961161028a57806365a114f1116102335780636ef8d66d1161020d5780636ef8d66d14610687578063715018a61461069c5780637d5a232f146106b157806380f51c12146106d157600080fd5b806365a114f114610631578063682dbc22146106475780636b2c0f551461066757600080fd5b80635c975abb116102645780635c975abb146105bf57806360216b00146105d7578063618ee0551461060457600080fd5b806354eea79614610569578063566887001461058957806357d775f8146105a957600080fd5b80633f4ba83a116102f757806346fbf68e116102d157806346fbf68e146104b557806347b16c6c146104ee578063482341261461050e57806352532faa1461052e57600080fd5b80633f4ba83a1461044857806344a848af1461045d578063457bfa2f1461047d57600080fd5b80632fd1b0a4116103285780632fd1b0a4146103b15780633c64f04b146103e85780633d5721071461042857600080fd5b8063089927411461035a57806317bdbae51461037c57806325c38b9f1461039c57600080fd5b3661035557005b600080fd5b34801561036657600080fd5b5061037a610375366004614241565b610b0c565b005b34801561038857600080fd5b5061037a610397366004614241565b610caf565b3480156103a857600080fd5b5061037a610e46565b3480156103bd57600080fd5b506016546103ce9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b3480156103f457600080fd5b506104186104033660046142ad565b60136020526000908152604090205460ff1681565b60405190151581526020016103df565b34801561043457600080fd5b5061037a6104433660046142ad565b610ed6565b34801561045457600080fd5b5061037a610f6a565b34801561046957600080fd5b5061037a6104783660046142e2565b610fd3565b34801561048957600080fd5b5060115461049d906001600160a01b031681565b6040516001600160a01b0390911681526020016103df565b3480156104c157600080fd5b506104186104d03660046142e2565b6001600160a01b031660009081526006602052604090205460ff1690565b3480156104fa57600080fd5b5061037a610509366004614241565b611027565b34801561051a57600080fd5b5061037a610529366004614311565b6111be565b34801561053a57600080fd5b5061055b6105493660046142e2565b600f6020526000908152604090205481565b6040519081526020016103df565b34801561057557600080fd5b5061037a6105843660046142ad565b611232565b34801561059557600080fd5b5061037a6105a436600461432c565b6112bf565b3480156105b557600080fd5b5061055b600a5481565b3480156105cb57600080fd5b5060055460ff16610418565b3480156105e357600080fd5b5061055b6105f23660046142e2565b600b6020526000908152604090205481565b34801561061057600080fd5b5061055b61061f3660046142e2565b60156020526000908152604090205481565b34801561063d57600080fd5b5061055b60025481565b34801561065357600080fd5b5061037a61066236600461436c565b611483565b34801561067357600080fd5b5061037a6106823660046142e2565b61156f565b34801561069357600080fd5b5061037a6115c0565b3480156106a857600080fd5b5061037a6115c9565b3480156106bd57600080fd5b5061037a6106cc36600461449a565b61161b565b3480156106dd57600080fd5b506104186106ec3660046142e2565b60066020526000908152604090205460ff1681565b34801561070d57600080fd5b5061037a61071c3660046142e2565b611667565b34801561072d57600080fd5b5061037a6116b8565b34801561074257600080fd5b5061037a610751366004614241565b61171f565b34801561076257600080fd5b506007546107779067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016103df565b34801561079c57600080fd5b5061037a6107ab3660046142e2565b6118b6565b3480156107bc57600080fd5b506000546001600160a01b031661049d565b3480156107da57600080fd5b5061055b60035481565b3480156107f057600080fd5b5061037a6107ff3660046142ad565b611907565b34801561081057600080fd5b5061037a61081f3660046142e2565b611c63565b34801561083057600080fd5b5061037a61083f36600461458b565b611ccd565b34801561085057600080fd5b5061037a61085f366004614692565b612024565b34801561087057600080fd5b5061037a61087f366004614241565b612387565b34801561089057600080fd5b506108d361089f3660046142ad565b600e6020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b0395861681529490931660208501529183015260608201526080016103df565b34801561090a57600080fd5b5061055b60105481565b34801561092057600080fd5b5061055b61092f3660046142e2565b600c6020526000908152604090205481565b34801561094d57600080fd5b5061055b61095c3660046142e2565b60086020526000908152604090205481565b34801561097a57600080fd5b5061037a61098936600461458b565b612438565b34801561099a57600080fd5b5061055b60015481565b3480156109b057600080fd5b506104186109bf3660046142ad565b60096020526000908152604090205460ff1681565b3480156109e057600080fd5b506104186109ef3660046142e2565b60126020526000908152604090205460ff1681565b348015610a1057600080fd5b50610418610a1f3660046142e2565b6001600160a01b031660009081526012602052604090205460ff1690565b348015610a4957600080fd5b5061037a610a58366004614241565b6128c6565b348015610a6957600080fd5b5061037a612a5d565b348015610a7e57600080fd5b5061037a610a8d3660046142ad565b612a66565b348015610a9e57600080fd5b5061037a610aad3660046142e2565b612b10565b348015610abe57600080fd5b5061055b610acd3660046142e2565b600d6020526000908152604090205481565b348015610aeb57600080fd5b5061055b610afa3660046142e2565b60146020526000908152604090205481565b3360009081526012602052604090205460ff16610b695760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b828114610baa5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca857828282818110610bc757610bc76146ff565b9050602002013560146000878785818110610be457610be46146ff565b9050602002016020810190610bf991906142e2565b6001600160a01b031681526020810191909152604001600020557f8b59d386e660418a48d742213ad5ce7c4dd51ae81f30e4e2c387f17d907010c9858583818110610c4657610c466146ff565b9050602002016020810190610c5b91906142e2565b848484818110610c6d57610c6d6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610ca08161472b565b915050610bad565b5050505050565b3360009081526012602052604090205460ff16610d075760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b828114610d485760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca857828282818110610d6557610d656146ff565b90506020020135600f6000878785818110610d8257610d826146ff565b9050602002016020810190610d9791906142e2565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610de457610de46146ff565b9050602002016020810190610df991906142e2565b848484818110610e0b57610e0b6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610e3e8161472b565b915050610d4b565b6000546001600160a01b03163314610e8e5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b600354610e9b9042614746565b60028190556040519081527f68e825132f7d4bc837dea2d64ac9fc19912bf0224b67f9317d8f1a917f5304a1906020015b60405180910390a1565b3360009081526012602052604090205460ff16610f2e5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b60108190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b3360009081526006602052604090205460ff16610fc95760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610b60565b610fd1612bdd565b565b6000546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b61102481612c74565b50565b3360009081526012602052604090205460ff1661107f5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b8281146110c05760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca8578282828181106110dd576110dd6146ff565b90506020020135600c60008787858181106110fa576110fa6146ff565b905060200201602081019061110f91906142e2565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061115c5761115c6146ff565b905060200201602081019061117191906142e2565b848484818110611183576111836146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806111b68161472b565b9150506110c3565b3360009081526012602052604090205460ff166112165760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b6016805463ffffffff191663ffffffff92909216919091179055565b3360009081526012602052604090205460ff1661128a5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b600a8190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b390602001610f5f565b600260045414156113125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b60565b600260045560055460ff161561135d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b600780546001919060009061137d90849067ffffffffffffffff1661475e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060086000836001600160a01b03166001600160a01b0316815260200190815260200160002054811161140a5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610b60565b61141f6001600160a01b038316333084612d2d565b6007546040805167ffffffffffffffff90921682523360208301526001600160a01b0384168282015260608201839052517fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce7649181900360800190a150506001600455565b60008484848460405160200161149c949392919061478a565b60405160208183030381529060405280519060200120905080600154146115055760405162461bcd60e51b815260206004820152601860248201527f4d69736d617463682063757272656e74207369676e65727300000000000000006044820152606401610b60565b87516020808a0191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012061156590888888888888612dc5565b5050505050505050565b6000546001600160a01b031633146115b75760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816130fb565b610fd1336130fb565b6000546001600160a01b031633146116115760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b610fd160006131b4565b61164f8a8a8a8a604051602001611635949392919061478a565b604051602081830303815290604052878787878787611483565b61165b8a8a8a8a613204565b50505050505050505050565b6000546001600160a01b031633146116af5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816133ae565b3360009081526006602052604090205460ff166117175760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610b60565b610fd161346b565b3360009081526012602052604090205460ff166117775760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b8281146117b85760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca8578282828181106117d5576117d56146ff565b90506020020135601560008787858181106117f2576117f26146ff565b905060200201602081019061180791906142e2565b6001600160a01b031681526020810191909152604001600020557f4f12d1a5bfb3ccd3719255d4d299d808d50cdca9a0a5c2b3a5aaa7edde73052c858583818110611854576118546146ff565b905060200201602081019061186991906142e2565b84848481811061187b5761187b6146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806118ae8161472b565b9150506117bb565b6000546001600160a01b031633146118fe5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b611024816134e6565b60055460ff161561194d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6000818152600e6020908152604091829020825160808101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600390910154606082018190526119e85760405162461bcd60e51b815260206004820152601260248201527f7472616e73666572206e6f7420657869737400000000000000000000000000006044820152606401610b60565b60105481606001516119fa9190614746565b4211611a485760405162461bcd60e51b815260206004820152601560248201527f7472616e73666572207374696c6c206c6f636b656400000000000000000000006044820152606401610b60565b6000828152600e60209081526040822080546001600160a01b0319908116825560018201805490911690556002810183905560030191909155601154908201516001600160a01b039081169116148015611ab1575060008281526009602052604090205460ff16155b15611bd5576011546040808301519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91611aed9160040190815260200190565b600060405180830381600087803b158015611b0757600080fd5b505af1158015611b1b573d6000803e3d6000fd5b50505050600081600001516001600160a01b0316826040015161c35090604051600060405180830381858888f193505050503d8060008114611b79576040519150601f19603f3d011682016040523d82523d6000602084013e611b7e565b606091505b5050905080611bcf5760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2072656c6179206e617469766520746f6b656e000000006044820152606401610b60565b50611bf6565b805160408201516020830151611bf6926001600160a01b03909116916135a3565b7f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d442682826000015183602001518460400151604051611c5794939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050565b6000546001600160a01b03163314611cab5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b60055460ff1615611d135760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b611d5a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050878787611483565b6000611d9b89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506135d892505050565b805190915067ffffffffffffffff164614611df85760405162461bcd60e51b815260206004820152601460248201527f64737420636861696e4964206d69736d617463680000000000000000000000006044820152606401610b60565b8051602080830151604080850151606086015160808701519251600096611e6b96909594910160c095861b6001600160c01b031990811682529490951b9093166008850152606091821b6bffffffffffffffffffffffff199081166010860152911b166024830152603882015260580190565b60408051601f1981840301815291815281516020928301206000818152600990935291205490915060ff1615611ee35760405162461bcd60e51b815260206004820152601a60248201527f776974686472617720616c7265616479207375636365656465640000000000006044820152606401610b60565b6000818152600960205260409020805460ff1916600117905560608201516080830151611f109190613738565b60608201516001600160a01b03166000908152600f60205260409020548015801590611f3f5750808360800151115b15611f6157611f5c82846040015185606001518660800151613850565b611f8b565b611f8b8360400151846080015185606001516001600160a01b03166135a39092919063ffffffff16565b7f48a1ab26f3aa7b62bb6b6e8eed182f292b84eb7b006c0254386b268af20774be8284602001518560400151866060015187608001518860a0015160405161200f9695949392919095865267ffffffffffffffff9490941660208601526001600160a01b03928316604086015291166060840152608083015260a082015260c00190565b60405180910390a15050505050505050505050565b600260045414156120775760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b60565b600260045560055460ff16156120c25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6001600160a01b038516600090815260146020526040902054841161211c5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610b60565b6001600160a01b038516600090815260156020526040902054158061215957506001600160a01b0385166000908152601560205260409020548411155b6121a55760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610b60565b60165463ffffffff908116908216116122005760405162461bcd60e51b815260206004820152601660248201527f6d617820736c69707061676520746f6f20736d616c6c000000000000000000006044820152606401610b60565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288811b8216603484015287901b166048820152605c81018590526001600160c01b031960c085811b8216607c84015284811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152601390935291205490915060ff16156122d05760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610b60565b6000818152601360205260409020805460ff191660011790556122fe6001600160a01b038716333088612d2d565b604080518281523360208201526001600160a01b0389811682840152881660608201526080810187905267ffffffffffffffff86811660a0830152851660c082015263ffffffff841660e082015290517f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f01918190036101000190a1505060016004555050505050565b6000546001600160a01b031633146123cf5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b60025442116124205760405162461bcd60e51b815260206004820152601460248201527f6e6f742072656163682072657365742074696d650000000000000000000000006044820152606401610b60565b60001960025561243284848484613204565b50505050565b60055460ff161561247e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6124c588888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050878787611483565b600061250689898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061390492505050565b9050468160a0015167ffffffffffffffff16146125655760405162461bcd60e51b815260206004820152601560248201527f64737420636861696e4964206e6f74206d6174636800000000000000000000006044820152606401610b60565b8051602080830151604080850151606080870151608088015160a089015160c0808b015187519a861b6bffffffffffffffffffffffff199081168c8c015298861b891660348c01529590941b9096166048890152605c880191909152811b6001600160c01b0319908116607c88015293901b9092166084850152608c808501929092528051808503909201825260ac9093018352805190820120600081815260139092529190205460ff161561264f5760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610b60565b60008181526013602052604090819020805460ff19166001179055820151606083015161267c9190613738565b6040808301516001600160a01b03166000908152600f602052205480158015906126a95750808360600151115b156126cb576126c682846020015185604001518660600151613850565b61282f565b60115460408401516001600160a01b0390811691161415612805576011546060840151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161271d9160040190815260200190565b600060405180830381600087803b15801561273757600080fd5b505af115801561274b573d6000803e3d6000fd5b50505050600083602001516001600160a01b0316846060015161c35090604051600060405180830381858888f193505050503d80600081146127a9576040519150601f19603f3d011682016040523d82523d6000602084013e6127ae565b606091505b50509050806127ff5760405162461bcd60e51b815260206004820152601c60248201527f6661696c656420746f2072656c6179206e617469766520746f6b656e000000006044820152606401610b60565b5061282f565b61282f8360200151846060015185604001516001600160a01b03166135a39092919063ffffffff16565b7f79fa08de5149d912dce8e5e8da7a7c17ccdf23dd5d3bfe196802e6eb86347c7c82846000015185602001518660400151876060015188608001518960c0015160405161200f97969594939291909687526001600160a01b0395861660208801529385166040870152919093166060850152608084019290925267ffffffffffffffff9190911660a083015260c082015260e00190565b3360009081526012602052604090205460ff1661291e5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610b60565b82811461295f5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610b60565b60005b83811015610ca85782828281811061297c5761297c6146ff565b9050602002013560086000878785818110612999576129996146ff565b90506020020160208101906129ae91906142e2565b6001600160a01b031681526020810191909152604001600020557fc56b0d14c4940515800d94ebbd0f3f5d8cc58ba1109c12536bd993b72e466e4f8585838181106129fb576129fb6146ff565b9050602002016020810190612a1091906142e2565b848484818110612a2257612a226146ff565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180612a558161472b565b915050612962565b610fd133612c74565b6000546001600160a01b03163314612aae5760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b6003548111612b0b5760405162461bcd60e51b815260206004820152602360248201527f6e6f7469636520706572696f642063616e206f6e6c7920626520696e637265616044820152621cd95960ea1b6064820152608401610b60565b600355565b6000546001600160a01b03163314612b585760405162461bcd60e51b815260206004820181905260248201526000805160206149c38339815191526044820152606401610b60565b6001600160a01b038116612bd45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b60565b611024816131b4565b60055460ff16612c2f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b60565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610ecc565b6001600160a01b03811660009081526012602052604090205460ff16612cdc5760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610b60565b6001600160a01b038116600081815260126020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b9101610f5f565b6040516001600160a01b03808516602483015283166044820152606481018290526124329085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613a7c565b828114612e205760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610b60565b6000805b84811015612e6457838382818110612e3e57612e3e6146ff565b9050602002013582612e509190614746565b915080612e5c8161472b565b915050612e24565b5060006003612e748360026147ee565b612e7e919061480d565b612e89906001614746565b905060008080805b8a8110156130a9576000612f148d8d84818110612eb057612eb06146ff565b9050602002810190612ec2919061482f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f613b6190919063ffffffff16565b9050836001600160a01b0316816001600160a01b031611612f775760405162461bcd60e51b815260206004820152601e60248201527f7369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610b60565b8093505b8a8a84818110612f8d57612f8d6146ff565b9050602002016020810190612fa291906142e2565b6001600160a01b0316816001600160a01b0316111561301c57612fc6600184614746565b92508983106130175760405162461bcd60e51b815260206004820152601060248201527f7369676e6572206e6f7420666f756e64000000000000000000000000000000006044820152606401610b60565b612f7b565b8a8a8481811061302e5761302e6146ff565b905060200201602081019061304391906142e2565b6001600160a01b0316816001600160a01b031614156130835788888481811061306e5761306e6146ff565b90506020020135856130809190614746565b94505b85851061309657505050505050506130f2565b50806130a18161472b565b915050612e91565b5060405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610b60565b50505050505050565b6001600160a01b03811660009081526006602052604090205460ff166131635760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610b60565b6001600160a01b038116600081815260066020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610f5f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82811461325f5760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610b60565b6000805b8481101561333857816001600160a01b0316868683818110613287576132876146ff565b905060200201602081019061329c91906142e2565b6001600160a01b0316116132fd5760405162461bcd60e51b815260206004820152602260248201527f4e6577207369676e657273206e6f7420696e20617363656e64696e67206f726460448201526132b960f11b6064820152608401610b60565b85858281811061330f5761330f6146ff565b905060200201602081019061332491906142e2565b9150806133308161472b565b915050613263565b5084848484604051602001613350949392919061478a565b60408051601f198184030181529082905280516020909101206001557ff126123539a68393c55697f617e7d1148e371988daed246c2f41da99965a23f89061339f908790879087908790614876565b60405180910390a15050505050565b6001600160a01b03811660009081526006602052604090205460ff16156134175760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610b60565b6001600160a01b038116600081815260066020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610f5f565b60055460ff16156134b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b60565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c5c3390565b6001600160a01b03811660009081526012602052604090205460ff161561354f5760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610b60565b6001600160a01b038116600081815260126020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b59101610f5f565b6040516001600160a01b0383166024820152604481018290526135d390849063a9059cbb60e01b90606401612d61565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156137305761363683613c0b565b9092509050816001141561365e5761364d83613c45565b67ffffffffffffffff16845261361f565b81600214156136845761367083613c45565b67ffffffffffffffff16602085015261361f565b81600314156136b15761369e61369984613cc7565b613d84565b6001600160a01b0316604085015261361f565b81600414156136d9576136c661369984613cc7565b6001600160a01b0316606085015261361f565b81600514156136fd576136f36136ee84613cc7565b613d8f565b608085015261361f565b81600614156137215761371761371284613cc7565b613dc6565b60a085015261361f565b61372b8382613dde565b61361f565b505050919050565b600a54613743575050565b6001600160a01b0382166000908152600c60205260409020548061376657505050565b6001600160a01b0383166000908152600b6020526040812054600a5490914291613790818461480d565b61379a91906147ee565b6001600160a01b0387166000908152600d60205260409020549091508111156137c5578492506137d2565b6137cf8584614746565b92505b838311156138225760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610b60565b506001600160a01b039094166000908152600b6020908152604080832093909355600d905220929092555050565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600e90935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce6906138f69086815260200190565b60405180910390a150505050565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905283518085019094528184528301849052909190805b602083015151835110156137305761396983613c0b565b909250905081600114156139935761398361369984613cc7565b6001600160a01b03168452613952565b81600214156139bb576139a861369984613cc7565b6001600160a01b03166020850152613952565b81600314156139e3576139d061369984613cc7565b6001600160a01b03166040850152613952565b8160041415613a02576139f86136ee84613cc7565b6060850152613952565b8160051415613a2857613a1483613c45565b67ffffffffffffffff166080850152613952565b8160061415613a4e57613a3a83613c45565b67ffffffffffffffff1660a0850152613952565b8160071415613a6d57613a6361371284613cc7565b60c0850152613952565b613a778382613dde565b613952565b6000613ad1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e509092919063ffffffff16565b8051909150156135d35780806020019051810190613aef91906148f8565b6135d35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b60565b6000815160411415613b955760208201516040830151606084015160001a613b8b86828585613e69565b9350505050613c05565b815160401415613bbd5760208201516040830151613bb4858383614012565b92505050613c05565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b60565b92915050565b6000806000613c1984613c45565b9050613c2660088261480d565b9250806007166005811115613c3d57613c3d61491a565b915050915091565b602080820151825181019091015160009182805b600a811015613cc15783811a9150613c728160076147ee565b82607f16901b851794508160801660001415613caf57613c93816001614746565b86518790613ca2908390614746565b9052509395945050505050565b80613cb98161472b565b915050613c59565b50600080fd5b60606000613cd483613c45565b90506000818460000151613ce89190614746565b9050836020015151811115613cfc57600080fd5b8167ffffffffffffffff811115613d1557613d15614356565b6040519080825280601f01601f191660200182016040528015613d3f576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015613d79578181015183820152613d72602082614746565b9050613d57565b505050935250919050565b6000613c0582614055565b6000602082511115613da057600080fd5b6020820151905081516020613db59190614930565b613dc09060086147ee565b1c919050565b60008151602014613dd657600080fd5b506020015190565b6000816005811115613df257613df261491a565b1415613e01576135d382613c45565b6002816005811115613e1557613e1561491a565b1415610355576000613e2683613c45565b90508083600001818151613e3a9190614746565b905250602083015151835111156135d357600080fd5b6060613e5f848460008561407d565b90505b9392505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613ee65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b60565b8360ff16601b1480613efb57508360ff16601c145b613f525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610b60565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613fa6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140095760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b60565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b0161404b86828785613e69565b9695505050505050565b6000815160141461406557600080fd5b50602001516c01000000000000000000000000900490565b6060824710156140f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b60565b843b6141435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b60565b600080866001600160a01b0316858760405161415f9190614973565b60006040518083038185875af1925050503d806000811461419c576040519150601f19603f3d011682016040523d82523d6000602084013e6141a1565b606091505b50915091506141b18282866141bc565b979650505050505050565b606083156141cb575081613e62565b8251156141db5782518084602001fd5b8160405162461bcd60e51b8152600401610b60919061498f565b60008083601f84011261420757600080fd5b50813567ffffffffffffffff81111561421f57600080fd5b6020830191508360208260051b850101111561423a57600080fd5b9250929050565b6000806000806040858703121561425757600080fd5b843567ffffffffffffffff8082111561426f57600080fd5b61427b888389016141f5565b9096509450602087013591508082111561429457600080fd5b506142a1878288016141f5565b95989497509550505050565b6000602082840312156142bf57600080fd5b5035919050565b80356001600160a01b03811681146142dd57600080fd5b919050565b6000602082840312156142f457600080fd5b613e62826142c6565b803563ffffffff811681146142dd57600080fd5b60006020828403121561432357600080fd5b613e62826142fd565b6000806040838503121561433f57600080fd5b614348836142c6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060006080888a03121561438757600080fd5b873567ffffffffffffffff8082111561439f57600080fd5b818a0191508a601f8301126143b357600080fd5b8135818111156143c5576143c5614356565b604051601f8201601f19908116603f011681019083821181831017156143ed576143ed614356565b816040528281528d602084870101111561440657600080fd5b82602086016020830137600094508460208483010152809b5050505060208a013581811115614433578283fd5b61443f8c828d016141f5565b90995097505060408a013581811115614456578283fd5b6144628c828d016141f5565b90975095505060608a013581811115614479578283fd5b6144858c828d016141f5565b9a9d999c50979a509598949794955050505050565b60008060008060008060008060008060a08b8d0312156144b957600080fd5b8a3567ffffffffffffffff808211156144d157600080fd5b6144dd8e838f016141f5565b909c509a5060208d01359150808211156144f657600080fd5b6145028e838f016141f5565b909a50985060408d013591508082111561451b57600080fd5b6145278e838f016141f5565b909850965060608d013591508082111561454057600080fd5b61454c8e838f016141f5565b909650945060808d013591508082111561456557600080fd5b506145728d828e016141f5565b915080935050809150509295989b9194979a5092959850565b6000806000806000806000806080898b0312156145a757600080fd5b883567ffffffffffffffff808211156145bf57600080fd5b818b0191508b601f8301126145d357600080fd5b8135818111156145e257600080fd5b8c60208285010111156145f457600080fd5b60209283019a509850908a0135908082111561460f57600080fd5b61461b8c838d016141f5565b909850965060408b013591508082111561463457600080fd5b6146408c838d016141f5565b909650945060608b013591508082111561465957600080fd5b506146668b828c016141f5565b999c989b5096995094979396929594505050565b803567ffffffffffffffff811681146142dd57600080fd5b60008060008060008060c087890312156146ab57600080fd5b6146b4876142c6565b95506146c2602088016142c6565b9450604087013593506146d76060880161467a565b92506146e56080880161467a565b91506146f360a088016142fd565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561473f5761473f614715565b5060010190565b6000821982111561475957614759614715565b500190565b600067ffffffffffffffff80831681851680830382111561478157614781614715565b01949350505050565b60008186825b878110156147bf576001600160a01b036147a9836142c6565b1683526020928301929190910190600101614790565b50506001600160fb1b038411156147d557600080fd5b8360051b80868337600091019081529695505050505050565b600081600019048311821515161561480857614808614715565b500290565b60008261482a57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261484657600080fd5b83018035915067ffffffffffffffff82111561486157600080fd5b60200191503681900382131561423a57600080fd5b6040808252810184905260008560608301825b878110156148b7576001600160a01b036148a2846142c6565b16825260209283019290910190600101614889565b5083810360208501528481526001600160fb1b038511156148d757600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b60006020828403121561490a57600080fd5b81518015158114613e6257600080fd5b634e487b7160e01b600052602160045260246000fd5b60008282101561494257614942614715565b500390565b60005b8381101561496257818101518382015260200161494a565b838111156124325750506000910152565b60008251614985818460208701614947565b9190910192915050565b60208152600082518060208401526149ae816040850160208701614947565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212203f14fea0a73c0d3c92d4acb9575964e24ae96cd02f6a44ac4a3a6bd6f6e2ab8a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSigners(address[],uint256[],bytes[],address[],uint256[])": {
        "params": {
          "_curPowers": "powers of current signers",
          "_curSigners": "sorted list of current signers",
          "_newSigners": "sorted list of new signers",
          "_sigs": "list of signatures sorted by signer addresses"
        }
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_msg": "signed message",
          "_powers": "powers of current signers",
          "_signers": "sorted list of current signers",
          "_sigs": "list of signatures sorted by signer addresses"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resetSigners(address[],uint256[])": {
        "notice": "reset signers, only used for init setup and emergency recovery"
      },
      "updateSigners(address[],uint256[],bytes[],address[],uint256[])": {
        "notice": "Update new signers."
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "notice": "Verifies that a message is signed by a quorum among the signers The sigs must be sorted by signer addresses in ascending order."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4203,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "ssHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4205,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "resetTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4207,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "noticePeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 206,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 121,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2891,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "pausers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3057,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "addseq",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 3061,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "minAdd",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3065,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "withdraws",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3067,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "epochLength",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3071,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "epochVolumes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3075,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "epochVolumeCaps",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3079,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "lastOpTimestamps",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3093,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "delayedTransfers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(delayedTransfer)3088_storage)"
      },
      {
        "astId": 3097,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "delayThresholds",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3099,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "delayPeriod",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3101,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3105,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "governors",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1732,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "transfers",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1736,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "minSend",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1740,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "maxSend",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1742,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "minimalMaxSlippage",
        "offset": 0,
        "slot": "22",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(delayedTransfer)3088_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Pool.delayedTransfer)",
        "numberOfBytes": "32",
        "value": "t_struct(delayedTransfer)3088_storage"
      },
      "t_struct(delayedTransfer)3088_storage": {
        "encoding": "inplace",
        "label": "struct Pool.delayedTransfer",
        "members": [
          {
            "astId": 3081,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3083,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3085,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3087,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}