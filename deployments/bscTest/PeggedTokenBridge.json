{
  "address": "0x61fc4d40D313Eb01483F537A6db2B29fB38aEa8d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "_sigsVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PeggedTokenBridge.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "LogRecord",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_request",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigsVerifier",
      "outputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4d045384935615693d593125b7f72bd34aa5e018f5a80bd95eab2e6f7331fda",
  "receipt": {
    "to": null,
    "from": "0x75E186Bd5b2605afA400bEB6D45A2e9F2D9d1bf5",
    "contractAddress": "0x61fc4d40D313Eb01483F537A6db2B29fB38aEa8d",
    "transactionIndex": 1,
    "gasUsed": "832370",
    "logsBloom": "0x
    "blockHash": "0x71ea2b36f55f3d889aecfa2791c6b97372ad95faccd99684200bb27440ee4372",
    "transactionHash": "0xa4d045384935615693d593125b7f72bd34aa5e018f5a80bd95eab2e6f7331fda",
    "logs": [],
    "blockNumber": 14415588,
    "cumulativeGasUsed": "931731",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50B96c4374EFeEA0C183D06679A14e951E33B4Dd"
  ],
  "solcInputHash": "ec8aeef17b677112d267cdf57a172412",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"_sigsVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PeggedTokenBridge.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"LogRecord\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_request\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigsVerifier\",\"outputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The bridge to mint and burn pegged tokens at this chain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256,uint64)\":{\"notice\":\"burn tokens to trigger withdrawal of locked tokens at the remote chain\"},\"mint(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Mint tokens triggered by token deposit at a remote chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegged/PeggedTokenBridge.sol\":\"PeggedTokenBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xbc3887db62a3dfc74137f8d5d8236533b035501929772aa8e512d3df0bc85341\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPegged.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pegged.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPegged {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Mint {\\n        address token; // tag: 1\\n        address account; // tag: 2\\n        uint256 amount; // tag: 3\\n        uint64 nonce; // tag: 4\\n    } // end struct Mint\\n\\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.account = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.nonce = uint64(buf.decVarint());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Mint\\n\\n    struct Withdraw {\\n        address receiver; // tag: 1\\n        address token; // tag: 2\\n        uint256 amount; // tag: 3\\n        uint64 burnChainId; // tag: 4\\n        uint64 nonce; // tag: 5\\n    } // end struct Withdraw\\n\\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.burnChainId = uint64(buf.decVarint());\\n            } else if (tag == 5) {\\n                m.nonce = uint64(buf.decVarint());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Withdraw\\n}\\n\",\"keccak256\":\"0x7fc3bd5bcea9b517797d9e556296522701c77cef7c24d4314abfe09efbeee5d1\",\"license\":\"GPL-3.0-only\"},\"contracts/pegged/PeggedToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PeggedToken is ERC20 {\\n    address public immutable controller;\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"caller is not controller\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _controller\\n    ) ERC20(_name, _symbol) {\\n        controller = _controller;\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyController {\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) external onlyController {\\n        _burn(_from, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0fc2d8f7e854c36f27b5b9ef6712f73472c80ebcaa28b9f58f62c8242f827545\",\"license\":\"GPL-3.0-only\"},\"contracts/pegged/PeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\nimport \\\"../libraries/PbPegged.sol\\\";\\nimport \\\"./PeggedToken.sol\\\";\\n\\n/**\\n * @title The bridge to mint and burn pegged tokens at this chain\\n */\\ncontract PeggedTokenBridge {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    mapping(bytes32 => bool) public records;\\n\\n    enum Action {\\n        Mint,\\n        Burn\\n    }\\n    event LogRecord(Action action, address token, address account, uint256 amount, uint64 nonce);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Mint tokens triggered by token deposit at a remote chain\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Mint\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _request), _sigs, _signers, _powers);\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\n        bytes32 id = keccak256(abi.encodePacked(\\\"mint\\\", request.token, request.account, request.amount, request.nonce));\\n        require(records[id] == false, \\\"record exists\\\");\\n        records[id] = true;\\n        PeggedToken(request.token).mint(request.account, request.amount);\\n        emit LogRecord(Action.Mint, request.token, request.account, request.amount, request.nonce);\\n    }\\n\\n    /**\\n     * @notice burn tokens to trigger withdrawal of locked tokens at the remote chain\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) external {\\n        bytes32 id = keccak256(abi.encodePacked(\\\"burn\\\", _token, msg.sender, _amount, _nonce));\\n        require(records[id] == false, \\\"record exists\\\");\\n        records[id] = true;\\n        PeggedToken(_token).burn(msg.sender, _amount);\\n        emit LogRecord(Action.Burn, _token, msg.sender, _amount, _nonce);\\n    }\\n}\\n\",\"keccak256\":\"0xa004df07fd1ca719a9ad01e518fef94f1d0e3cdc6377ed3660ee799203372517\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ea4380380610ea483398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610e136100916000396000818160a301526102d70152610e136000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301e6472514610051578063be22b62d14610089578063ccf2683b1461009e578063f8734302146100dd575b600080fd5b61007461005f3660046108f5565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61009c61009736600461092a565b6100f0565b005b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610080565b61009c6100eb3660046109c3565b610280565b60405163313ab93760e11b60208201526bffffffffffffffffffffffff19606085811b8216602484015233901b166038820152604c810183905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c083901b16606c82015260009060740160408051601f19818403018152918152815160209283012060008181529283905291205490915060ff16156101c15760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b60448201526064015b60405180910390fd5b60008181526020819052604090819020805460ff1916600117905551632770a7eb60e21b8152336004820152602481018490526001600160a01b03851690639dc29fac90604401600060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050507ff0ce70b0a9e7a7ceeffb6ab06fe3cb96d45cecab4929343d5c2d2e2f27fe2c3b600185338686604051610272959493929190610ac8565b60405180910390a150505050565b600046306040516020016102bd92919091825260601b6bffffffffffffffffffffffff1916602082015263135a5b9d60e21b603482015260380190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161031993929190610b20565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b81526004016103509796959493929190610c8a565b60006040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b5050505060006103c18a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061058d92505050565b9050600081600001518260200151836040015184606001516040516020016104469493929190631b5a5b9d60e21b8152606094851b6bffffffffffffffffffffffff1990811660048301529390941b9092166018840152602c83015260c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916604c82015260540190565b60408051601f19818403018152918152815160209283012060008181529283905291205490915060ff16156104ad5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b60448201526064016101b8565b60008181526020818152604091829020805460ff191660011790558351908401518483015192516340c10f1960e01b81526001600160a01b039182166004820152602481019390935216906340c10f1990604401600060405180830381600087803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b505083516020850151604080870151606088015191517ff0ce70b0a9e7a7ceeffb6ab06fe3cb96d45cecab4929343d5c2d2e2f27fe2c3b96506105789550600094939290610ac8565b60405180910390a15050505050505050505050565b60408051608081018252600080825260208083018290528284018290526060830182905283518085019094528184528301849052909190805b6020830151518351101561068d576105dd83610695565b9092509050816001141561060c576105fc6105f7846106cf565b61078c565b6001600160a01b031684526105c6565b8160021415610634576106216105f7846106cf565b6001600160a01b031660208501526105c6565b81600314156106585761064e610649846106cf565b61079d565b60408501526105c6565b816004141561067e5761066a836107d4565b67ffffffffffffffff1660608501526105c6565b6106888382610856565b6105c6565b505050919050565b60008060006106a3846107d4565b90506106b0600882610d3c565b92508060071660058111156106c7576106c7610ab2565b915050915091565b606060006106dc836107d4565b905060008184600001516106f09190610d5e565b905083602001515181111561070457600080fd5b8167ffffffffffffffff81111561071d5761071d610d76565b6040519080825280601f01601f191660200182016040528015610747576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561078157818101518382015261077a602082610d5e565b905061075f565b505050935250919050565b6000610797826108cd565b92915050565b60006020825111156107ae57600080fd5b60208201519050815160206107c39190610d8c565b6107ce906008610da3565b1c919050565b602080820151825181019091015160009182805b600a8110156108505783811a9150610801816007610da3565b82607f16901b85179450816080166000141561083e57610822816001610d5e565b86518790610831908390610d5e565b9052509395945050505050565b8061084881610dc2565b9150506107e8565b50600080fd5b600081600581111561086a5761086a610ab2565b141561087e57610879826107d4565b505050565b600281600581111561089257610892610ab2565b141561004c5760006108a3836107d4565b905080836000018181516108b79190610d5e565b9052506020830151518351111561087957600080fd5b600081516014146108dd57600080fd5b50602001516c01000000000000000000000000900490565b60006020828403121561090757600080fd5b5035919050565b80356001600160a01b038116811461092557600080fd5b919050565b60008060006060848603121561093f57600080fd5b6109488461090e565b925060208401359150604084013567ffffffffffffffff8116811461096c57600080fd5b809150509250925092565b60008083601f84011261098957600080fd5b50813567ffffffffffffffff8111156109a157600080fd5b6020830191508360208260051b85010111156109bc57600080fd5b9250929050565b6000806000806000806000806080898b0312156109df57600080fd5b883567ffffffffffffffff808211156109f757600080fd5b818b0191508b601f830112610a0b57600080fd5b813581811115610a1a57600080fd5b8c6020828501011115610a2c57600080fd5b60209283019a509850908a01359080821115610a4757600080fd5b610a538c838d01610977565b909850965060408b0135915080821115610a6c57600080fd5b610a788c838d01610977565b909650945060608b0135915080821115610a9157600080fd5b50610a9e8b828c01610977565b999c989b5096995094979396929594505050565b634e487b7160e01b600052602160045260246000fd5b60a0810160028710610aea57634e487b7160e01b600052602160045260246000fd5b9581526001600160a01b039485166020820152929093166040830152606082015267ffffffffffffffff90911660809091015290565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015610be75782840389528135601e19883603018112610b9e57600080fd5b8701803567ffffffffffffffff811115610bb757600080fd5b803603891315610bc657600080fd5b610bd38682898501610b3a565b9a87019a9550505090840190600101610b7d565b5091979650505050505050565b8183526000602080850194508260005b85811015610c30576001600160a01b03610c1d8361090e565b1687529582019590820190600101610c04565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c6d57600080fd5b8260051b8083602087013760009401602001938452509192915050565b608081526000885180608084015260005b81811015610cb8576020818c0181015160a0868401015201610c9b565b81811115610cca57600060a083860101525b50601f01601f1916820182810360a09081016020850152610cee908201898b610b63565b90508281036040840152610d03818789610bf4565b90508281036060840152610d18818587610c3b565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082610d5957634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610d7157610d71610d26565b500190565b634e487b7160e01b600052604160045260246000fd5b600082821015610d9e57610d9e610d26565b500390565b6000816000190483118215151615610dbd57610dbd610d26565b500290565b6000600019821415610dd657610dd6610d26565b506001019056fea26469706673582212201133ab9fcd9e34aa70636c71c012fa1b367f2699be5ec7aa1f679dcbeff876ae64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301e6472514610051578063be22b62d14610089578063ccf2683b1461009e578063f8734302146100dd575b600080fd5b61007461005f3660046108f5565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61009c61009736600461092a565b6100f0565b005b6100c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610080565b61009c6100eb3660046109c3565b610280565b60405163313ab93760e11b60208201526bffffffffffffffffffffffff19606085811b8216602484015233901b166038820152604c810183905277ffffffffffffffffffffffffffffffffffffffffffffffff1960c083901b16606c82015260009060740160408051601f19818403018152918152815160209283012060008181529283905291205490915060ff16156101c15760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b60448201526064015b60405180910390fd5b60008181526020819052604090819020805460ff1916600117905551632770a7eb60e21b8152336004820152602481018490526001600160a01b03851690639dc29fac90604401600060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050507ff0ce70b0a9e7a7ceeffb6ab06fe3cb96d45cecab4929343d5c2d2e2f27fe2c3b600185338686604051610272959493929190610ac8565b60405180910390a150505050565b600046306040516020016102bd92919091825260601b6bffffffffffffffffffffffff1916602082015263135a5b9d60e21b603482015260380190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b60405160200161031993929190610b20565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b81526004016103509796959493929190610c8a565b60006040518083038186803b15801561036857600080fd5b505afa15801561037c573d6000803e3d6000fd5b5050505060006103c18a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061058d92505050565b9050600081600001518260200151836040015184606001516040516020016104469493929190631b5a5b9d60e21b8152606094851b6bffffffffffffffffffffffff1990811660048301529390941b9092166018840152602c83015260c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916604c82015260540190565b60408051601f19818403018152918152815160209283012060008181529283905291205490915060ff16156104ad5760405162461bcd60e51b815260206004820152600d60248201526c7265636f72642065786973747360981b60448201526064016101b8565b60008181526020818152604091829020805460ff191660011790558351908401518483015192516340c10f1960e01b81526001600160a01b039182166004820152602481019390935216906340c10f1990604401600060405180830381600087803b15801561051b57600080fd5b505af115801561052f573d6000803e3d6000fd5b505083516020850151604080870151606088015191517ff0ce70b0a9e7a7ceeffb6ab06fe3cb96d45cecab4929343d5c2d2e2f27fe2c3b96506105789550600094939290610ac8565b60405180910390a15050505050505050505050565b60408051608081018252600080825260208083018290528284018290526060830182905283518085019094528184528301849052909190805b6020830151518351101561068d576105dd83610695565b9092509050816001141561060c576105fc6105f7846106cf565b61078c565b6001600160a01b031684526105c6565b8160021415610634576106216105f7846106cf565b6001600160a01b031660208501526105c6565b81600314156106585761064e610649846106cf565b61079d565b60408501526105c6565b816004141561067e5761066a836107d4565b67ffffffffffffffff1660608501526105c6565b6106888382610856565b6105c6565b505050919050565b60008060006106a3846107d4565b90506106b0600882610d3c565b92508060071660058111156106c7576106c7610ab2565b915050915091565b606060006106dc836107d4565b905060008184600001516106f09190610d5e565b905083602001515181111561070457600080fd5b8167ffffffffffffffff81111561071d5761071d610d76565b6040519080825280601f01601f191660200182016040528015610747576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561078157818101518382015261077a602082610d5e565b905061075f565b505050935250919050565b6000610797826108cd565b92915050565b60006020825111156107ae57600080fd5b60208201519050815160206107c39190610d8c565b6107ce906008610da3565b1c919050565b602080820151825181019091015160009182805b600a8110156108505783811a9150610801816007610da3565b82607f16901b85179450816080166000141561083e57610822816001610d5e565b86518790610831908390610d5e565b9052509395945050505050565b8061084881610dc2565b9150506107e8565b50600080fd5b600081600581111561086a5761086a610ab2565b141561087e57610879826107d4565b505050565b600281600581111561089257610892610ab2565b141561004c5760006108a3836107d4565b905080836000018181516108b79190610d5e565b9052506020830151518351111561087957600080fd5b600081516014146108dd57600080fd5b50602001516c01000000000000000000000000900490565b60006020828403121561090757600080fd5b5035919050565b80356001600160a01b038116811461092557600080fd5b919050565b60008060006060848603121561093f57600080fd5b6109488461090e565b925060208401359150604084013567ffffffffffffffff8116811461096c57600080fd5b809150509250925092565b60008083601f84011261098957600080fd5b50813567ffffffffffffffff8111156109a157600080fd5b6020830191508360208260051b85010111156109bc57600080fd5b9250929050565b6000806000806000806000806080898b0312156109df57600080fd5b883567ffffffffffffffff808211156109f757600080fd5b818b0191508b601f830112610a0b57600080fd5b813581811115610a1a57600080fd5b8c6020828501011115610a2c57600080fd5b60209283019a509850908a01359080821115610a4757600080fd5b610a538c838d01610977565b909850965060408b0135915080821115610a6c57600080fd5b610a788c838d01610977565b909650945060608b0135915080821115610a9157600080fd5b50610a9e8b828c01610977565b999c989b5096995094979396929594505050565b634e487b7160e01b600052602160045260246000fd5b60a0810160028710610aea57634e487b7160e01b600052602160045260246000fd5b9581526001600160a01b039485166020820152929093166040830152606082015267ffffffffffffffff90911660809091015290565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b87811015610be75782840389528135601e19883603018112610b9e57600080fd5b8701803567ffffffffffffffff811115610bb757600080fd5b803603891315610bc657600080fd5b610bd38682898501610b3a565b9a87019a9550505090840190600101610b7d565b5091979650505050505050565b8183526000602080850194508260005b85811015610c30576001600160a01b03610c1d8361090e565b1687529582019590820190600101610c04565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c6d57600080fd5b8260051b8083602087013760009401602001938452509192915050565b608081526000885180608084015260005b81811015610cb8576020818c0181015160a0868401015201610c9b565b81811115610cca57600060a083860101525b50601f01601f1916820182810360a09081016020850152610cee908201898b610b63565b90508281036040840152610d03818789610bf4565b90508281036060840152610d18818587610c3b565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082610d5957634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610d7157610d71610d26565b500190565b634e487b7160e01b600052604160045260246000fd5b600082821015610d9e57610d9e610d26565b500390565b6000816000190483118215151615610dbd57610dbd610d26565b500290565b6000600019821415610dd657610dd6610d26565b506001019056fea26469706673582212201133ab9fcd9e34aa70636c71c012fa1b367f2699be5ec7aa1f679dcbeff876ae64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "The bridge to mint and burn pegged tokens at this chain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256,uint64)": {
        "notice": "burn tokens to trigger withdrawal of locked tokens at the remote chain"
      },
      "mint(bytes,bytes[],address[],uint256[])": {
        "notice": "Mint tokens triggered by token deposit at a remote chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10926,
        "contract": "contracts/pegged/PeggedTokenBridge.sol:PeggedTokenBridge",
        "label": "records",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}