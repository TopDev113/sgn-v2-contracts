{
  "address": "0x57d2D079Bd94c00CA8b68c2A1F611e8bC7540669",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "_sigsVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "FarmingRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        }
      ],
      "name": "FarmingRewardContributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rewardsRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedRewardAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "contributeToRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigsVerifier",
      "outputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd987223718d6ab9adb151b5e14bab0c558392935506789798b7a87e079cd5702",
  "receipt": {
    "to": null,
    "from": "0x75E186Bd5b2605afA400bEB6D45A2e9F2D9d1bf5",
    "contractAddress": "0x57d2D079Bd94c00CA8b68c2A1F611e8bC7540669",
    "transactionIndex": 2,
    "gasUsed": "1621541",
    "logsBloom": "0x
    "blockHash": "0x295326178896ede32b6e9d3b00970cb456c9d260b30fd4fca6be0c88e128431d",
    "transactionHash": "0xd987223718d6ab9adb151b5e14bab0c558392935506789798b7a87e079cd5702",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20169791,
        "transactionHash": "0xd987223718d6ab9adb151b5e14bab0c558392935506789798b7a87e079cd5702",
        "address": "0x57d2D079Bd94c00CA8b68c2A1F611e8bC7540669",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000075e186bd5b2605afa400beb6d45a2e9f2d9d1bf5"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x295326178896ede32b6e9d3b00970cb456c9d260b30fd4fca6be0c88e128431d"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 20169791,
        "transactionHash": "0xd987223718d6ab9adb151b5e14bab0c558392935506789798b7a87e079cd5702",
        "address": "0x57d2D079Bd94c00CA8b68c2A1F611e8bC7540669",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000075e186bd5b2605afa400beb6d45a2e9f2d9d1bf5",
        "logIndex": 6,
        "blockHash": "0x295326178896ede32b6e9d3b00970cb456c9d260b30fd4fca6be0c88e128431d"
      }
    ],
    "blockNumber": 20169791,
    "cumulativeGasUsed": "3855717",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf89354F314faF344Abd754924438bA798E306DF2"
  ],
  "numDeployments": 1,
  "solcInputHash": "322a61bf4ad8fb9b885ee9f725844bc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"_sigsVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"FarmingRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"FarmingRewardContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rewardsRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contributeToRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigsVerifier\",\"outputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards(bytes,bytes[],address[],uint256[])\":{\"details\":\"Here we use cumulative reward to make claim process idempotent\",\"params\":{\"_powers\":\"powers of current signers\",\"_rewardsRequest\":\"rewards request bytes coded in protobuf\",\"_signers\":\"sorted list of current signers\",\"_sigs\":\"list of signatures sorted by signer addresses in ascending order\"}},\"contributeToRewardPool(address,uint256)\":{\"params\":{\"_amount\":\"the amount of the token to contribute\",\"_token\":\"the address of the token to contribute\"}},\"drainToken(address,uint256)\":{\"details\":\"emergency use only\",\"params\":{\"_amount\":\"drained token amount\",\"_token\":\"the address of the token to drain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract to hold and distribute farming rewards.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Claim rewards\"},\"contributeToRewardPool(address,uint256)\":{\"notice\":\"Contribute reward tokens to the reward pool\"},\"drainToken(address,uint256)\":{\"notice\":\"Owner drains tokens when the contract is paused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity-bridge/FarmingRewards.sol\":\"FarmingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0d0b090d078a5f50ea7b751331614785e536fc09bcff28bfe08a60613ebca1ae\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbFarming.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/farming.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbFarming {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct FarmingRewards {\\n        address recipient; // tag: 1\\n        address[] tokenAddresses; // tag: 2\\n        uint256[] cumulativeRewardAmounts; // tag: 3\\n    } // end struct FarmingRewards\\n\\n    function decFarmingRewards(bytes memory raw) internal pure returns (FarmingRewards memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256[] memory cnts = buf.cntTags(3);\\n        m.tokenAddresses = new address[](cnts[2]);\\n        cnts[2] = 0; // reset counter for later use\\n        m.cumulativeRewardAmounts = new uint256[](cnts[3]);\\n        cnts[3] = 0; // reset counter for later use\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.recipient = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.tokenAddresses[cnts[2]] = Pb._address(buf.decBytes());\\n                cnts[2]++;\\n            } else if (tag == 3) {\\n                m.cumulativeRewardAmounts[cnts[3]] = Pb._uint256(buf.decBytes());\\n                cnts[3]++;\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder FarmingRewards\\n}\\n\",\"keccak256\":\"0xc79f3e19fd85e22cfd13f9121b75310cdefe17ee2c37a9bdf3fd28e20f641e21\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidity-bridge/FarmingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\nimport \\\"../libraries/PbFarming.sol\\\";\\nimport \\\"../safeguard/Pauser.sol\\\";\\n\\n/**\\n * @title A contract to hold and distribute farming rewards.\\n */\\ncontract FarmingRewards is Pauser {\\n    using SafeERC20 for IERC20;\\n\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    // recipient => tokenAddress => amount\\n    mapping(address => mapping(address => uint256)) public claimedRewardAmounts;\\n\\n    event FarmingRewardClaimed(address indexed recipient, address indexed token, uint256 reward);\\n    event FarmingRewardContributed(address indexed contributor, address indexed token, uint256 contribution);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Claim rewards\\n     * @dev Here we use cumulative reward to make claim process idempotent\\n     * @param _rewardsRequest rewards request bytes coded in protobuf\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function claimRewards(\\n        bytes calldata _rewardsRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"FarmingRewards\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _rewardsRequest), _sigs, _signers, _powers);\\n        PbFarming.FarmingRewards memory rewards = PbFarming.decFarmingRewards(_rewardsRequest);\\n        bool hasNewReward;\\n        for (uint256 i = 0; i < rewards.tokenAddresses.length; i++) {\\n            address token = rewards.tokenAddresses[i];\\n            uint256 cumulativeRewardAmount = rewards.cumulativeRewardAmounts[i];\\n            uint256 newReward = cumulativeRewardAmount - claimedRewardAmounts[rewards.recipient][token];\\n            if (newReward > 0) {\\n                hasNewReward = true;\\n                claimedRewardAmounts[rewards.recipient][token] = cumulativeRewardAmount;\\n                IERC20(token).safeTransfer(rewards.recipient, newReward);\\n                emit FarmingRewardClaimed(rewards.recipient, token, newReward);\\n            }\\n        }\\n        require(hasNewReward, \\\"No new reward\\\");\\n    }\\n\\n    /**\\n     * @notice Contribute reward tokens to the reward pool\\n     * @param _token the address of the token to contribute\\n     * @param _amount the amount of the token to contribute\\n     */\\n    function contributeToRewardPool(address _token, uint256 _amount) external whenNotPaused {\\n        address contributor = msg.sender;\\n        IERC20(_token).safeTransferFrom(contributor, address(this), _amount);\\n\\n        emit FarmingRewardContributed(contributor, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Owner drains tokens when the contract is paused\\n     * @dev emergency use only\\n     * @param _token the address of the token to drain\\n     * @param _amount drained token amount\\n     */\\n    function drainToken(address _token, uint256 _amount) external whenPaused onlyOwner {\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x37ae1dcaebf0af23bd1a960d7714282809331f8d390950ee7b0070413b5e6132\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x5d6bf2c82f3467d50d9f7c653b20a47ab3bbe3e81699600fc03eb8f796d005bb\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001d4a38038062001d4a833981016040819052620000349162000182565b6200003f3362000069565b6000805460ff60a01b191690556200005733620000b9565b6001600160a01b0316608052620001b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff1615620001275760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c72656164792070617573657200000000000000604482015260640160405180910390fd5b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910160405180910390a150565b6000602082840312156200019557600080fd5b81516001600160a01b0381168114620001ad57600080fd5b9392505050565b608051611b73620001d76000396000818161024c01526104210152611b736000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806380f51c12116100975780638da5cb5b116100665780638da5cb5b1461020f5780639d4323be14610234578063ccf2683b14610247578063f2fde38b1461026e57600080fd5b806380f51c12146101be578063825168ff146101e157806382dc1ec4146101f45780638456cb591461020757600080fd5b80635c975abb116100d35780635c975abb1461017e5780636b2c0f55146101905780636b5d21e9146101a35780636ef8d66d146101b657600080fd5b80631744092e146100fa5780633f4ba83a1461013857806346fbf68e14610142575b600080fd5b610125610108366004611645565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b610140610281565b005b61016e610150366004611678565b6001600160a01b031660009081526001602052604090205460ff1690565b604051901515815260200161012f565b600054600160a01b900460ff1661016e565b61014061019e366004611678565b6102ef565b6101406101b13660046116df565b610364565b610140610693565b61016e6101cc366004611678565b60016020526000908152604090205460ff1681565b6101406101ef3660046117ce565b61069c565b610140610202366004611678565b610751565b6101406107c3565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161012f565b6101406102423660046117ce565b61082a565b61021c7f000000000000000000000000000000000000000000000000000000000000000081565b61014061027c366004611678565b610904565b3360009081526001602052604090205460ff166102e55760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064015b60405180910390fd5b6102ed6109f2565b565b336103026000546001600160a01b031690565b6001600160a01b0316146103585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61036181610a98565b50565b600054600160a01b900460ff16156103b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b6000463060405160200161040792919091825260601b6bffffffffffffffffffffffff191660208201527f4661726d696e6752657761726473000000000000000000000000000000000000603482015260420190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b604051602001610463939291906117f8565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b815260040161049a9796959493929190611929565b60006040518083038186803b1580156104b257600080fd5b505afa1580156104c6573d6000803e3d6000fd5b50505050600061050b8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5892505050565b90506000805b8260200151518110156106385760008360200151828151811061053657610536611a09565b6020026020010151905060008460400151838151811061055857610558611a09565b60209081029190910181015186516001600160a01b0390811660009081526002845260408082209287168252919093528220549092506105989083611a35565b905080156106225785516001600160a01b0390811660009081526002602090815260408083209387168084529390915290208390558651600196506105de919083610e14565b85516040518281526001600160a01b038086169216907f97e6c3172350795e26977663112f38653689372e771e85bad9fbadb1af0e98b29060200160405180910390a35b505050808061063090611a4c565b915050610511565b50806106865760405162461bcd60e51b815260206004820152600d60248201527f4e6f206e6577207265776172640000000000000000000000000000000000000060448201526064016102dc565b5050505050505050505050565b6102ed33610a98565b600054600160a01b900460ff16156106e95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b336106ff6001600160a01b038416823085610ea9565b826001600160a01b0316816001600160a01b03167f40aa1b9a9157bc37a09a78d5a46e53087b82ee0034ebe896d4d1a52f31b333d48460405161074491815260200190565b60405180910390a3505050565b336107646000546001600160a01b031690565b6001600160a01b0316146107ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61036181610ee7565b3360009081526001602052604090205460ff166108225760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016102dc565b6102ed610fa5565b600054600160a01b900460ff166108835760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102dc565b336108966000546001600160a01b031690565b6001600160a01b0316146108ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b6109006001600160a01b0383163383610e14565b5050565b336109176000546001600160a01b031690565b6001600160a01b03161461096d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b6001600160a01b0381166109e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102dc565b6103618161102d565b600054600160a01b900460ff16610a4b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102dc565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526001602052604090205460ff16610b005760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016102dc565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e91015b60405180910390a150565b610b85604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b60408051808201909152600080825260208201849052610ba6826003611095565b905080600281518110610bbb57610bbb611a09565b602002602001015167ffffffffffffffff811115610bdb57610bdb611a67565b604051908082528060200260200182016040528015610c04578160200160208202803683370190505b508360200181905250600081600281518110610c2257610c22611a09565b60200260200101818152505080600381518110610c4157610c41611a09565b602002602001015167ffffffffffffffff811115610c6157610c61611a67565b604051908082528060200260200182016040528015610c8a578160200160208202803683370190505b508360400181905250600081600381518110610ca857610ca8611a09565b6020026020010181815250506000805b60208401515184511015610e0b57610ccf8461114f565b90925090508160011415610cfe57610cee610ce985611189565b611246565b6001600160a01b03168552610cb8565b8160021415610d9357610d13610ce985611189565b856020015184600281518110610d2b57610d2b611a09565b602002602001015181518110610d4357610d43611a09565b60200260200101906001600160a01b031690816001600160a01b03168152505082600281518110610d7657610d76611a09565b602002602001018051809190610d8b90611a4c565b905250610cb8565b8160031415610dfc57610dad610da885611189565b611257565b856040015184600381518110610dc557610dc5611a09565b602002602001015181518110610ddd57610ddd611a09565b60200260200101818152505082600381518110610d7657610d76611a09565b610e06848261128e565b610cb8565b50505050919050565b6040516001600160a01b038316602482015260448101829052610ea490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611300565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ee19085906323b872dd60e01b90608401610e40565b50505050565b6001600160a01b03811660009081526001602052604090205460ff1615610f505760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016102dc565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610b4d565b600054600160a01b900460ff1615610ff25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a7b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81516060906110a5836001611a7d565b67ffffffffffffffff8111156110bd576110bd611a67565b6040519080825280602002602001820160405280156110e6578160200160208202803683370190505b5091506000805b60208601515186511015611146576111048661114f565b8092508193505050600184838151811061112057611120611a09565b602002602001018181516111349190611a7d565b905250611141868261128e565b6110ed565b50509092525090565b600080600061115d846113e5565b905061116a600882611a95565b925080600716600581111561118157611181611ab7565b915050915091565b60606000611196836113e5565b905060008184600001516111aa9190611a7d565b90508360200151518111156111be57600080fd5b8167ffffffffffffffff8111156111d7576111d7611a67565b6040519080825280601f01601f191660200182016040528015611201576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561123b578181015183820152611234602082611a7d565b9050611219565b505050935250919050565b600061125182611467565b92915050565b600060208251111561126857600080fd5b602082015190508151602061127d9190611a35565b611288906008611acd565b1c919050565b60008160058111156112a2576112a2611ab7565b14156112b157610ea4826113e5565b60028160058111156112c5576112c5611ab7565b14156100f55760006112d6836113e5565b905080836000018181516112ea9190611a7d565b90525060208301515183511115610ea457600080fd5b6000611355826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661148f9092919063ffffffff16565b805190915015610ea457808060200190518101906113739190611aec565b610ea45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102dc565b602080820151825181019091015160009182805b600a8110156114615783811a9150611412816007611acd565b82607f16901b85179450816080166000141561144f57611433816001611a7d565b86518790611442908390611a7d565b9052509395945050505050565b8061145981611a4c565b9150506113f9565b50600080fd5b6000815160141461147757600080fd5b50602001516c01000000000000000000000000900490565b606061149e84846000856114a8565b90505b9392505050565b6060824710156115205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102dc565b6001600160a01b0385163b6115775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102dc565b600080866001600160a01b031685876040516115939190611b0e565b60006040518083038185875af1925050503d80600081146115d0576040519150601f19603f3d011682016040523d82523d6000602084013e6115d5565b606091505b50915091506115e58282866115f0565b979650505050505050565b606083156115ff5750816114a1565b82511561160f5782518084602001fd5b8160405162461bcd60e51b81526004016102dc9190611b2a565b80356001600160a01b038116811461164057600080fd5b919050565b6000806040838503121561165857600080fd5b61166183611629565b915061166f60208401611629565b90509250929050565b60006020828403121561168a57600080fd5b6114a182611629565b60008083601f8401126116a557600080fd5b50813567ffffffffffffffff8111156116bd57600080fd5b6020830191508360208260051b85010111156116d857600080fd5b9250929050565b6000806000806000806000806080898b0312156116fb57600080fd5b883567ffffffffffffffff8082111561171357600080fd5b818b0191508b601f83011261172757600080fd5b81358181111561173657600080fd5b8c602082850101111561174857600080fd5b60209283019a509850908a0135908082111561176357600080fd5b61176f8c838d01611693565b909850965060408b013591508082111561178857600080fd5b6117948c838d01611693565b909650945060608b01359150808211156117ad57600080fd5b506117ba8b828c01611693565b999c989b5096995094979396929594505050565b600080604083850312156117e157600080fd5b6117ea83611629565b946020939093013593505050565b838152818360208301376000910160200190815292915050565b60005b8381101561182d578181015183820152602001611815565b83811115610ee15750506000910152565b60008151808452611856816020860160208601611812565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156118cf576001600160a01b036118bc83611629565b16875295820195908201906001016118a3565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561190c57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60808152600061193c608083018a61183e565b82810360208401528088825260208201905060208960051b8301018a60005b8b8110156119cf57848303601f190184528135368e9003601e1901811261198157600080fd5b8d01803567ffffffffffffffff81111561199a57600080fd5b8036038f13156119a957600080fd5b6119b785826020850161186a565b6020968701969095509390930192505060010161195b565b505084810360408601526119e481898b611893565b9250505082810360608401526119fb8185876118da565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611a4757611a47611a1f565b500390565b6000600019821415611a6057611a60611a1f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60008219821115611a9057611a90611a1f565b500190565b600082611ab257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611ae757611ae7611a1f565b500290565b600060208284031215611afe57600080fd5b815180151581146114a157600080fd5b60008251611b20818460208701611812565b9190910192915050565b6020815260006114a1602083018461183e56fea264697066735822122072935896d9ad87098e46c9c5b0fc70aaaad60ca4bde8fd70b97819dbd6baf82a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806380f51c12116100975780638da5cb5b116100665780638da5cb5b1461020f5780639d4323be14610234578063ccf2683b14610247578063f2fde38b1461026e57600080fd5b806380f51c12146101be578063825168ff146101e157806382dc1ec4146101f45780638456cb591461020757600080fd5b80635c975abb116100d35780635c975abb1461017e5780636b2c0f55146101905780636b5d21e9146101a35780636ef8d66d146101b657600080fd5b80631744092e146100fa5780633f4ba83a1461013857806346fbf68e14610142575b600080fd5b610125610108366004611645565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b610140610281565b005b61016e610150366004611678565b6001600160a01b031660009081526001602052604090205460ff1690565b604051901515815260200161012f565b600054600160a01b900460ff1661016e565b61014061019e366004611678565b6102ef565b6101406101b13660046116df565b610364565b610140610693565b61016e6101cc366004611678565b60016020526000908152604090205460ff1681565b6101406101ef3660046117ce565b61069c565b610140610202366004611678565b610751565b6101406107c3565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161012f565b6101406102423660046117ce565b61082a565b61021c7f000000000000000000000000000000000000000000000000000000000000000081565b61014061027c366004611678565b610904565b3360009081526001602052604090205460ff166102e55760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064015b60405180910390fd5b6102ed6109f2565b565b336103026000546001600160a01b031690565b6001600160a01b0316146103585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61036181610a98565b50565b600054600160a01b900460ff16156103b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b6000463060405160200161040792919091825260601b6bffffffffffffffffffffffff191660208201527f4661726d696e6752657761726473000000000000000000000000000000000000603482015260420190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663682dbc22828b8b604051602001610463939291906117f8565b6040516020818303038152906040528989898989896040518863ffffffff1660e01b815260040161049a9796959493929190611929565b60006040518083038186803b1580156104b257600080fd5b505afa1580156104c6573d6000803e3d6000fd5b50505050600061050b8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5892505050565b90506000805b8260200151518110156106385760008360200151828151811061053657610536611a09565b6020026020010151905060008460400151838151811061055857610558611a09565b60209081029190910181015186516001600160a01b0390811660009081526002845260408082209287168252919093528220549092506105989083611a35565b905080156106225785516001600160a01b0390811660009081526002602090815260408083209387168084529390915290208390558651600196506105de919083610e14565b85516040518281526001600160a01b038086169216907f97e6c3172350795e26977663112f38653689372e771e85bad9fbadb1af0e98b29060200160405180910390a35b505050808061063090611a4c565b915050610511565b50806106865760405162461bcd60e51b815260206004820152600d60248201527f4e6f206e6577207265776172640000000000000000000000000000000000000060448201526064016102dc565b5050505050505050505050565b6102ed33610a98565b600054600160a01b900460ff16156106e95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b336106ff6001600160a01b038416823085610ea9565b826001600160a01b0316816001600160a01b03167f40aa1b9a9157bc37a09a78d5a46e53087b82ee0034ebe896d4d1a52f31b333d48460405161074491815260200190565b60405180910390a3505050565b336107646000546001600160a01b031690565b6001600160a01b0316146107ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61036181610ee7565b3360009081526001602052604090205460ff166108225760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016102dc565b6102ed610fa5565b600054600160a01b900460ff166108835760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102dc565b336108966000546001600160a01b031690565b6001600160a01b0316146108ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b6109006001600160a01b0383163383610e14565b5050565b336109176000546001600160a01b031690565b6001600160a01b03161461096d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b6001600160a01b0381166109e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102dc565b6103618161102d565b600054600160a01b900460ff16610a4b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102dc565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526001602052604090205460ff16610b005760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016102dc565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e91015b60405180910390a150565b610b85604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b60408051808201909152600080825260208201849052610ba6826003611095565b905080600281518110610bbb57610bbb611a09565b602002602001015167ffffffffffffffff811115610bdb57610bdb611a67565b604051908082528060200260200182016040528015610c04578160200160208202803683370190505b508360200181905250600081600281518110610c2257610c22611a09565b60200260200101818152505080600381518110610c4157610c41611a09565b602002602001015167ffffffffffffffff811115610c6157610c61611a67565b604051908082528060200260200182016040528015610c8a578160200160208202803683370190505b508360400181905250600081600381518110610ca857610ca8611a09565b6020026020010181815250506000805b60208401515184511015610e0b57610ccf8461114f565b90925090508160011415610cfe57610cee610ce985611189565b611246565b6001600160a01b03168552610cb8565b8160021415610d9357610d13610ce985611189565b856020015184600281518110610d2b57610d2b611a09565b602002602001015181518110610d4357610d43611a09565b60200260200101906001600160a01b031690816001600160a01b03168152505082600281518110610d7657610d76611a09565b602002602001018051809190610d8b90611a4c565b905250610cb8565b8160031415610dfc57610dad610da885611189565b611257565b856040015184600381518110610dc557610dc5611a09565b602002602001015181518110610ddd57610ddd611a09565b60200260200101818152505082600381518110610d7657610d76611a09565b610e06848261128e565b610cb8565b50505050919050565b6040516001600160a01b038316602482015260448101829052610ea490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611300565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ee19085906323b872dd60e01b90608401610e40565b50505050565b6001600160a01b03811660009081526001602052604090205460ff1615610f505760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016102dc565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610b4d565b600054600160a01b900460ff1615610ff25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102dc565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a7b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81516060906110a5836001611a7d565b67ffffffffffffffff8111156110bd576110bd611a67565b6040519080825280602002602001820160405280156110e6578160200160208202803683370190505b5091506000805b60208601515186511015611146576111048661114f565b8092508193505050600184838151811061112057611120611a09565b602002602001018181516111349190611a7d565b905250611141868261128e565b6110ed565b50509092525090565b600080600061115d846113e5565b905061116a600882611a95565b925080600716600581111561118157611181611ab7565b915050915091565b60606000611196836113e5565b905060008184600001516111aa9190611a7d565b90508360200151518111156111be57600080fd5b8167ffffffffffffffff8111156111d7576111d7611a67565b6040519080825280601f01601f191660200182016040528015611201576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561123b578181015183820152611234602082611a7d565b9050611219565b505050935250919050565b600061125182611467565b92915050565b600060208251111561126857600080fd5b602082015190508151602061127d9190611a35565b611288906008611acd565b1c919050565b60008160058111156112a2576112a2611ab7565b14156112b157610ea4826113e5565b60028160058111156112c5576112c5611ab7565b14156100f55760006112d6836113e5565b905080836000018181516112ea9190611a7d565b90525060208301515183511115610ea457600080fd5b6000611355826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661148f9092919063ffffffff16565b805190915015610ea457808060200190518101906113739190611aec565b610ea45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102dc565b602080820151825181019091015160009182805b600a8110156114615783811a9150611412816007611acd565b82607f16901b85179450816080166000141561144f57611433816001611a7d565b86518790611442908390611a7d565b9052509395945050505050565b8061145981611a4c565b9150506113f9565b50600080fd5b6000815160141461147757600080fd5b50602001516c01000000000000000000000000900490565b606061149e84846000856114a8565b90505b9392505050565b6060824710156115205760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102dc565b6001600160a01b0385163b6115775760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102dc565b600080866001600160a01b031685876040516115939190611b0e565b60006040518083038185875af1925050503d80600081146115d0576040519150601f19603f3d011682016040523d82523d6000602084013e6115d5565b606091505b50915091506115e58282866115f0565b979650505050505050565b606083156115ff5750816114a1565b82511561160f5782518084602001fd5b8160405162461bcd60e51b81526004016102dc9190611b2a565b80356001600160a01b038116811461164057600080fd5b919050565b6000806040838503121561165857600080fd5b61166183611629565b915061166f60208401611629565b90509250929050565b60006020828403121561168a57600080fd5b6114a182611629565b60008083601f8401126116a557600080fd5b50813567ffffffffffffffff8111156116bd57600080fd5b6020830191508360208260051b85010111156116d857600080fd5b9250929050565b6000806000806000806000806080898b0312156116fb57600080fd5b883567ffffffffffffffff8082111561171357600080fd5b818b0191508b601f83011261172757600080fd5b81358181111561173657600080fd5b8c602082850101111561174857600080fd5b60209283019a509850908a0135908082111561176357600080fd5b61176f8c838d01611693565b909850965060408b013591508082111561178857600080fd5b6117948c838d01611693565b909650945060608b01359150808211156117ad57600080fd5b506117ba8b828c01611693565b999c989b5096995094979396929594505050565b600080604083850312156117e157600080fd5b6117ea83611629565b946020939093013593505050565b838152818360208301376000910160200190815292915050565b60005b8381101561182d578181015183820152602001611815565b83811115610ee15750506000910152565b60008151808452611856816020860160208601611812565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156118cf576001600160a01b036118bc83611629565b16875295820195908201906001016118a3565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561190c57600080fd5b8260051b8083602087013760009401602001938452509192915050565b60808152600061193c608083018a61183e565b82810360208401528088825260208201905060208960051b8301018a60005b8b8110156119cf57848303601f190184528135368e9003601e1901811261198157600080fd5b8d01803567ffffffffffffffff81111561199a57600080fd5b8036038f13156119a957600080fd5b6119b785826020850161186a565b6020968701969095509390930192505060010161195b565b505084810360408601526119e481898b611893565b9250505082810360608401526119fb8185876118da565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611a4757611a47611a1f565b500390565b6000600019821415611a6057611a60611a1f565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60008219821115611a9057611a90611a1f565b500190565b600082611ab257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611ae757611ae7611a1f565b500290565b600060208284031215611afe57600080fd5b815180151581146114a157600080fd5b60008251611b20818460208701611812565b9190910192915050565b6020815260006114a1602083018461183e56fea264697066735822122072935896d9ad87098e46c9c5b0fc70aaaad60ca4bde8fd70b97819dbd6baf82a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards(bytes,bytes[],address[],uint256[])": {
        "details": "Here we use cumulative reward to make claim process idempotent",
        "params": {
          "_powers": "powers of current signers",
          "_rewardsRequest": "rewards request bytes coded in protobuf",
          "_signers": "sorted list of current signers",
          "_sigs": "list of signatures sorted by signer addresses in ascending order"
        }
      },
      "contributeToRewardPool(address,uint256)": {
        "params": {
          "_amount": "the amount of the token to contribute",
          "_token": "the address of the token to contribute"
        }
      },
      "drainToken(address,uint256)": {
        "details": "emergency use only",
        "params": {
          "_amount": "drained token amount",
          "_token": "the address of the token to drain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract to hold and distribute farming rewards.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards(bytes,bytes[],address[],uint256[])": {
        "notice": "Claim rewards"
      },
      "contributeToRewardPool(address,uint256)": {
        "notice": "Contribute reward tokens to the reward pool"
      },
      "drainToken(address,uint256)": {
        "notice": "Owner drains tokens when the contract is paused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24141,
        "contract": "contracts/liquidity-bridge/FarmingRewards.sol:FarmingRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/liquidity-bridge/FarmingRewards.sol:FarmingRewards",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24255,
        "contract": "contracts/liquidity-bridge/FarmingRewards.sol:FarmingRewards",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11222,
        "contract": "contracts/liquidity-bridge/FarmingRewards.sol:FarmingRewards",
        "label": "claimedRewardAmounts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}